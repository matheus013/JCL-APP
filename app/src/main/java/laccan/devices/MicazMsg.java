package laccan.devices;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MicazMsg'
 * message type.
 */

public class MicazMsg extends net.tinyos.message.Message {

    /**
     * The default size of this message type in bytes.
     */
    public static final int DEFAULT_MESSAGE_SIZE = 24;

    /**
     * The Active Message type associated with this message.
     */
    public static final int AM_TYPE = 172;

    /**
     * Create a new MicazMsg of size 24.
     */
    public MicazMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg of the given data_length.
     */
    public MicazMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg with the given data_length
     * and base offset.
     */
    public MicazMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg using the given byte array
     * as backing store.
     */
    public MicazMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public MicazMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MicazMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg embedded in the given message
     * at the given base offset.
     */
    public MicazMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MicazMsg embedded in the given message
     * at the given base offset and length.
     */
    public MicazMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
        String s = "Message <MicazMsg> \n";
        try {
            s += "  [NodeID=0x" + Long.toHexString(get_NodeID()) + "]\n";
        } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
        try {
            s += "  [Voltage=0x" + Long.toHexString(get_Voltage()) + "]\n";
        } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
        try {
            s += "  [Buffer=";
            for (int i = 0; i < 10; i++) {
                s += "0x" + Long.toHexString(getElement_Buffer(i) & 0xffff) + " ";
            }
            s += "]\n";
        } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
        return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: NodeID
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'NodeID' is signed (true).
     */
    public static boolean isSigned_NodeID() {
        return true;
    }

    /**
     * Return whether the field 'NodeID' is an array (false).
     */
    public static boolean isArray_NodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'NodeID'
     */
    public static int offset_NodeID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'NodeID'
     */
    public static int offsetBits_NodeID() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'NodeID'
     */
    public int get_NodeID() {
        return (int) getUIntBEElement(offsetBits_NodeID(), 16);
    }

    /**
     * Set the value of the field 'NodeID'
     */
    public void set_NodeID(int value) {
        setUIntBEElement(offsetBits_NodeID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'NodeID'
     */
    public static int size_NodeID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'NodeID'
     */
    public static int sizeBits_NodeID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Voltage
    //   Field type: int, signed
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Voltage' is signed (true).
     */
    public static boolean isSigned_Voltage() {
        return true;
    }

    /**
     * Return whether the field 'Voltage' is an array (false).
     */
    public static boolean isArray_Voltage() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Voltage'
     */
    public static int offset_Voltage() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Voltage'
     */
    public static int offsetBits_Voltage() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'Voltage'
     */
    public int get_Voltage() {
        return (int) getUIntBEElement(offsetBits_Voltage(), 16);
    }

    /**
     * Set the value of the field 'Voltage'
     */
    public void set_Voltage(int value) {
        setUIntBEElement(offsetBits_Voltage(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Voltage'
     */
    public static int size_Voltage() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Voltage'
     */
    public static int sizeBits_Voltage() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Buffer
    //   Field type: short[], signed
    //   Offset (bits): 32
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Buffer' is signed (true).
     */
    public static boolean isSigned_Buffer() {
        return true;
    }

    /**
     * Return whether the field 'Buffer' is an array (true).
     */
    public static boolean isArray_Buffer() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'Buffer'
     */
    public static int offset_Buffer(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Buffer'
     */
    public static int offsetBits_Buffer(int index1) {
        int offset = 32;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'Buffer' as a short[]
     */
    public short[] get_Buffer() {
        short[] tmp = new short[10];
        for (int index0 = 0; index0 < numElements_Buffer(0); index0++) {
            tmp[index0] = getElement_Buffer(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'Buffer' from the given short[]
     */
    public void set_Buffer(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_Buffer(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'Buffer'
     */
    public short getElement_Buffer(int index1) {
        return (short) getSIntBEElement(offsetBits_Buffer(index1), 16);
    }

    /**
     * Set an element of the array 'Buffer'
     */
    public void setElement_Buffer(int index1, short value) {
        setSIntBEElement(offsetBits_Buffer(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'Buffer'
     */
    public static int totalSize_Buffer() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'Buffer'
     */
    public static int totalSizeBits_Buffer() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'Buffer'
     */
    public static int elementSize_Buffer() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'Buffer'
     */
    public static int elementSizeBits_Buffer() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'Buffer'
     */
    public static int numDimensions_Buffer() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'Buffer'
     */
    public static int numElements_Buffer() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'Buffer'
     * for the given dimension.
     */
    public static int numElements_Buffer(int dimension) {
        int array_dims[] = {10,};
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0)
            throw new IllegalArgumentException("Array dimension " + dimension + " has unknown size");
        return array_dims[dimension];
    }

}