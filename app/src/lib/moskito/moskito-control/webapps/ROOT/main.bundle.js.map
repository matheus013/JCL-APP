{"version":3,"sources":["webpack:///./src/app/services/moskito-application.service.ts","webpack:///./src/app/services/http.service.ts","webpack:///./src/app/services/categories.service.ts","webpack:///./src/app/services/chart.service.ts","webpack:///./src/app/services/status.service.ts","webpack:///./src/app/widgets/widget.component.ts","webpack:///./src/app/services/widget.service.ts","webpack:///./src/app/shared/moskito-component-utils.ts","webpack:///./src/app/shared/timer/timer.component.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/content/content.component.ts","webpack:///./src/app/entities/history-item.ts","webpack:///./src/app/entities/moskito-application.ts","webpack:///./src/app/entities/moskito-category.ts","webpack:///./src/app/entities/moskito-component.ts","webpack:///./src/app/entities/status-statistic.ts","webpack:///./src/app/entities/system-status.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/pipes/components-category-filter.pipe.ts","webpack:///./src/app/pipes/components-status-filter.pipe.ts","webpack:///./src/app/pipes/history-category-filter.pipe.ts","webpack:///./src/app/pipes/history-status-filter.pipe.ts","webpack:///./src/app/pipes/keys.pipe.ts","webpack:///./src/app/pipes/sanitarize-html.pipe.ts","webpack:///./src/app/scan-column-navigation/categories.component.ts","webpack:///./src/app/scan-column-navigation/connect.component.ts","webpack:///./src/app/scan-column-navigation/scan-column-navigation.component.ts","webpack:///./src/app/scan-column-navigation/statistics.component.ts","webpack:///./src/app/scan-column-navigation/widgets-toggle.component.ts","webpack:///./src/app/services/health-status.service.ts","webpack:///./src/app/settings/settings.component.ts","webpack:///./src/app/shared/notifications/notifications-config.component.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/widgets/charts-widget.component.ts","webpack:///./src/app/widgets/history-widget.component.ts","webpack:///./src/app/widgets/modal/component-inspection-modal.component.ts","webpack:///./src/app/widgets/moskito-beta-components-widget.component.ts","webpack:///./src/app/widgets/moskito-components-widget.component.ts","webpack:///./src/app/widgets/tv-widget.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/scan-column-navigation/connect.component.css","webpack:///./src/app/settings/settings.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/content/content.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/scan-column-navigation/categories.component.html","webpack:///./src/app/scan-column-navigation/connect.component.html","webpack:///./src/app/scan-column-navigation/scan-column-navigation.component.html","webpack:///./src/app/scan-column-navigation/statistics.component.html","webpack:///./src/app/scan-column-navigation/widgets-toggle.component.html","webpack:///./src/app/settings/settings.component.html","webpack:///./src/app/shared/notifications/notifications-config.component.html","webpack:///./src/app/shared/timer/timer.component.html","webpack:///./src/app/widgets/charts-widget.component.html","webpack:///./src/app/widgets/history-widget.component.html","webpack:///./src/app/widgets/modal/component-inspection-modal.component.html","webpack:///./src/app/widgets/moskito-beta-components-widget.component.html","webpack:///./src/app/widgets/moskito-components-widget.component.html","webpack:///./src/app/widgets/tv-widget.component.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyD;AAMzD,IAAa,yBAAyB;IAkBpC;QAhBA,YAAO,GAAW,gBAAgB,CAAC;QACnC,iBAAY,GAAY,KAAK,CAAC;QAgB5B,IAAI,CAAC,gBAAgB,GAAG,IAAI,mEAAY,EAAQ,CAAC;QACjD,IAAI,CAAC,uBAAuB,GAAG,IAAI,mEAAY,EAAQ,CAAC;IAC1D,CAAC;IAEM,+CAAW,GAAlB;QACE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAEM,qDAAiB,GAAxB,UAAyB,GAAuB;QAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;YAAC,MAAM,CAAC;QACjB,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC;QAC9B,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;IACtC,CAAC;IAEM,gDAAY,GAAnB,UAAoB,aAAqB;QACvC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;YAAC,MAAM,CAAC;QAE3B,GAAG,CAAC,CAAkB,UAAkC,EAAlC,SAAI,CAAC,kBAAkB,CAAC,UAAU,EAAlC,cAAkC,EAAlC,IAAkC;YAAnD,IAAI,SAAS;YAChB,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,aAAa,CAAC;gBAClC,MAAM,CAAC,SAAS,CAAC;SACpB;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEM,6DAAyB,GAAhC,UAAiC,IAAY;QAC3C,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;IACrC,CAAC;IAEM,6DAAyB,GAAhC;QACE,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;IACrC,CAAC;IACH,gCAAC;AAAD,CAAC;AAnDY,yBAAyB;IADrC,wFAAU,EAAE;;GACA,yBAAyB,CAmDrC;AAnDqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNK;AACa;AAEzB;AACE;AAKwB;AACiB;AAK1E;IAKE,oCAAY,WAAmB,EAAE,SAAiB,EAAE,YAAsB;QACxE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IACH,iCAAC;AAAD,CAAC;AAED;;;GAGG;AAEH,IAAa,WAAW;IAOtB,qBAAoB,IAAU,EAAU,yBAAoD;QAAxE,SAAI,GAAJ,IAAI,CAAM;QAAU,8BAAyB,GAAzB,yBAAyB,CAA2B;QAJpF,gCAA2B,GAAG,IAAI,8DAAO,CAAC,EAAE,cAAc,EAAE,iDAAiD,EAAE,CAAC,CAAC;QACjH,gBAAW,GAAG,IAAI,8DAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAKxE,0CAA0C;QAC1C,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QAChC,IAAI,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,gBAAgB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAE9D,IAAI,CAAC,yBAAyB,CAAC,yBAAyB,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;IACzG,CAAC;IAGD,kCAAY,GAAZ,UAAc,GAAW;QACvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,yBAAyB,CAAC,yBAAyB,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QACvG,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;IAEM,4BAAM,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,4CAAsB,GAAtB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACjE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,8CAAwB,GAAxB,UAAyB,OAAe;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACjE,IAAI,YAAY,GAAyB,IAAI,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC;YAElE,GAAG,CAAC,CAAY,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY;gBAAvB,IAAI,GAAG;gBACV,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC;gBACxB,CAAC;aACF;YAED,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sCAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YAChE,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YAC3B,IAAI,aAAa,GAAG,IAAI,6EAAY,EAAE,CAAC;YAEvC,+BAA+B;YAC/B,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACtC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAE,CAAC;YACvE,CAAC;YAED,2BAA2B;YAC3B,aAAa,CAAC,aAAa,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC;YAC9D,aAAa,CAAC,aAAa,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC;YAE9D,MAAM,CAAC,aAAa,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,6CAAuB,GAAvB;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,oBAAoB,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACvE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,2CAAqB,GAArB,UAAsB,WAAmB;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,eAAe,GAAG,WAAW,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YAChF,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0CAAoB,GAApB,UAAqB,WAAmB;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,qBAAqB,GAAG,WAAW,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACtF,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,mCAAa,GAAb,UAAc,WAAmB,EAAE,SAAiB;QAClD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,kBAAkB,GAAG,WAAW,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACrG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yCAAmB,GAAnB,UAAoB,WAAmB,EAAE,SAAiB;QACxD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,oBAAoB,GAAG,WAAW,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACvG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0CAAoB,GAApB,UAAqB,WAAmB,EAAE,SAAiB,EAAE,YAAsB;QACjF,IAAI,MAAM,GAAG,IAAI,0BAA0B,CAAC,WAAW,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;QAClF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,0BAA0B,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACrH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+CAAyB,GAAzB,UAA0B,WAAmB,EAAE,SAAiB;QAC9D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,gCAAgC,GAAG,WAAW,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACnH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,sBAAsB,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,6CAAuB,GAAvB,UAAwB,WAAmB,EAAE,SAAiB;QAC5D,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,8BAA8B,GAAG,WAAW,GAAG,GAAG,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,UAAC,IAAc;YACjH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,oBAAoB,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yCAAmB,GAAnB,UAAoB,WAAmB,EAAE,SAAiB;QACxD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAG,kBAAgB,WAAW,SAAI,SAAW,EAAC,CAAC,GAAG,CAAC,UAAC,IAAI;YACnF,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uCAAiB,GAAjB;QACE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,yBAAyB,CAAC,CAAC,SAAS,EAAE,CAAC;IAClE,CAAC;IAED,yCAAmB,GAAnB;QACE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,2BAA2B,CAAC,CAAC,SAAS,EAAE,CAAC;IACpE,CAAC;IACH,kBAAC;AAAD,CAAC;AAjIY,WAAW;IADvB,wFAAU,EAAE;yDAQe,2DAAI,oBAAJ,2DAAI,sDAAqC,+FAAyB,oBAAzB,+FAAyB;GAPjF,WAAW,CAiIvB;AAjIuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCmB;AAC+B;AACA;AACX;AAG/D;;;;;GAKG;AAEH,IAAa,iBAAiB;IAe5B,2BAAoB,yBAAoD;QAApD,8BAAyB,GAAzB,yBAAyB,CAA2B;QAbxE;;;WAGG;QACI,oBAAe,GAAG,IAAI,mFAAe,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAUnE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QAE9D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;IACxC,CAAC;IAGD;;;;;OAKG;IACI,yCAAa,GAApB;QACE,iDAAiD;QACjD,IAAI,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAE9E,IAAI,oBAAoB,GAAG,EAAE,CAAC;QAE9B,wCAAwC;QACxC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,8FAAqB,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QACxF,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7C,oBAAoB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;QAEvE,yCAAyC;QACzC,GAAG,CAAC,CAAkB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;YAA3B,IAAI,SAAS;YAChB,IAAI,QAAQ,GAAG,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACd,QAAQ,GAAG,IAAI,mFAAe,EAAE,CAAC;gBACjC,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC;gBACnC,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC;gBAClC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC;gBACrD,QAAQ,CAAC,GAAG,GAAG,KAAK,CAAC;gBACrB,QAAQ,CAAC,UAAU,GAAG,EAAE,CAAC;YAC3B,CAAC;YAED,oCAAoC;YACpC,QAAQ,CAAC,MAAM,GAAG,8FAAqB,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3F,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEpC,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;SACrD;QAED,6CAA6C;QAC7C,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,GAAG,CAAC,CAAC,IAAI,YAAY,IAAI,oBAAoB,CAAC,CAAC,CAAC;YAC9C,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAEM,uCAAW,GAAlB;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC;QACpC,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED,sBAAI,qCAAM;aAKV;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAEhE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;aAVD,UAAW,MAAuB;YAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,cAAc,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACnE,CAAC;;;OAAA;IASD,sBAAI,2CAAY;aAAhB;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAEhE,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QACvE,CAAC;;;OAAA;IACH,wBAAC;AAAD,CAAC;AA3FY,iBAAiB;IAD7B,wFAAU,EAAE;yDAgBoC,+FAAyB,oBAAzB,+FAAyB;GAf7D,iBAAiB,CA2F7B;AA3F6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbyB;AAYvD,IAAa,YAAY;IAMvB;QACE,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAEM,sCAAe,GAAtB,UAAuB,KAAY,EAAE,SAAc;QACjD,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,GAAG,CAAC,CAAc,UAAY,EAAZ,UAAK,CAAC,MAAM,EAAZ,cAAY,EAAZ,IAAY;YAAzB,IAAI,KAAK;YACZ,IAAI,iBAAiB,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC1C,GAAG,CAAC,CAAc,UAAY,EAAZ,UAAK,CAAC,MAAM,EAAZ,cAAY,EAAZ,IAAY;gBAAzB,IAAI,KAAK;gBACZ,+BAA+B;gBAC/B,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACtB,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpC,CAAC;aACF;YAED,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACnC;QAED,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,UAAU;YAClD,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,YAAY,GAAG,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC;QAEjF,IAAI,WAAW,GAAG;YAChB,SAAS,EAAE,YAAY,CAAC,EAAE;YAC1B,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,SAAS;YACf,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,UAAU;YACpB,qBAAqB,EAAE,EAAE;YACzB,OAAO,EAAE;gBACP,eAAe,EAAE,CAAC;gBAClB,MAAM,EAAE,EAAC,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAC;aACnD;SACF,CAAC;QAEF,WAAW,CAAC,qBAAqB,GAAG;YAClC,KAAK,EAAE,YAAY,CAAC,WAAW;YAC/B,MAAM,EAAE,YAAY,CAAC,YAAY;SAClC,CAAC;QAEF,iBAAiB;QACjB,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAEM,mCAAY,GAAnB,UAAoB,KAAY,EAAE,SAAqB;QACrD,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,GAAG,CAAC,CAAc,UAAY,EAAZ,UAAK,CAAC,MAAM,EAAZ,cAAY,EAAZ,IAAY;YAAzB,IAAI,KAAK;YACZ,IAAI,iBAAiB,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC1C,GAAG,CAAC,CAAc,UAAY,EAAZ,UAAK,CAAC,MAAM,EAAZ,cAAY,EAAZ,IAAY;gBAAzB,IAAI,KAAK;gBACZ,+BAA+B;gBAC/B,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACtB,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpC,CAAC;aACF;YAED,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACnC;QAED,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,UAAU;YAClD,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,iBAAiB,GAAG,GAAG,GAAG,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC;QAEzD,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC;YACpD,aAAa,EAAE,iBAAiB;YAChC,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;IACL,CAAC;IAEM,sCAAe,GAAtB,UAAuB,SAAiB;QACtC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAEM,sCAAe,GAAtB,UAAuB,SAAiB;QACtC,qCAAqC;QACrC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACvC,CAAC;IACH,mBAAC;AAAD,CAAC;AAhGY,YAAY;IADxB,wFAAU,EAAE;;GACA,YAAY,CAgGxB;AAhGwB;;;;;;;;;;;;;;;;;;;ACZkB;AAI3C,IAAa,aAAa;IAKxB;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE5D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;IAGM,mCAAW,GAAlB;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,sBAAI,iCAAM;aAKV;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAE9D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;aAVD,UAAW,MAAgB;YACzB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3D,CAAC;;;OAAA;IASM,iCAAS,GAAhB,UAAiB,KAAa;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEzB,yFAAyF;YACzF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAEpC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAEM,oCAAY,GAAnB,UAAoB,WAAmB;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,KAAa;YAC/C,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACjE,CAAC;IACH,oBAAC;AAAD,CAAC;AAhDY,aAAa;IADzB,wFAAU,EAAE;;GACA,aAAa,CAgDzB;AAhDyB;;;;;;;;ACF1B;AAAA;IAAA;IAWA,CAAC;IAAD,aAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACb0C;AAQ3C,IAAa,aAAa;IA8CxB;QA5CQ,YAAO,GAAG;YAChB,QAAQ,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,yBAAyB;gBACpC,WAAW,EAAE,QAAQ;gBACrB,SAAS,EAAE,UAAU;gBACrB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,KAAK;aACf;YACD,IAAI,EAAE;gBACJ,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE,UAAU;gBACrB,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,IAAI;gBACf,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE,KAAK;aACf;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,cAAc;gBACzB,WAAW,EAAE,QAAQ;gBACrB,SAAS,EAAE,QAAQ;gBACnB,IAAI,EAAE,mBAAmB;gBACzB,OAAO,EAAE,IAAI;aACd;YACD,SAAS,EAAE;gBACT,IAAI,EAAE,SAAS;gBACf,SAAS,EAAE,eAAe;gBAC1B,WAAW,EAAE,SAAS;gBACtB,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,YAAY;gBAClB,OAAO,EAAE,IAAI;aACd;YACD,YAAY,EAAE;gBACZ,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,6BAA6B;gBACxC,WAAW,EAAE,eAAe;gBAC5B,SAAS,EAAE,UAAU;gBACrB,IAAI,EAAE,cAAc;gBACpB,OAAO,EAAE,IAAI;aACd;SACF,CAAC;IAGc,CAAC;IAEV,uCAAe,GAAtB,UAAuB,MAAc;QACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;IAC9D,CAAC;IAEM,wCAAgB,GAAvB,UAAwB,MAAc,EAAE,OAAgB;QACtD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3C,CAAC;IAEM,2CAAmB,GAA1B,UAA2B,MAAc;QACvC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;IACjE,CAAC;IAEM,kCAAU,GAAjB;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACH,oBAAC;AAAD,CAAC;AAjEY,aAAa;IADzB,wFAAU,EAAE;;GACA,aAAa,CAiEzB;AAjEyB;;;;;;;;ACL1B;AAAA,IAAK,MAEJ;AAFD,WAAK,MAAM;IACT,mCAAI;IAAE,uCAAM;IAAE,iCAAG;IAAE,uCAAM;IAAE,uCAAM;IAAE,qCAAK;AAC1C,CAAC,EAFI,MAAM,KAAN,MAAM,QAEV;AAED;IAAA;IAwCA,CAAC;IAtCQ,6CAAuB,GAA9B,UAA+B,UAA8B;QAC3D,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;QAE/B,GAAG,CAAC,CAAkB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;YAA3B,IAAI,SAAS;YAChB,IAAI,eAAe,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,eAAe,GAAG,WAAW,CAAC,CAAC,CAAC;gBAClC,WAAW,GAAG,eAAe,CAAC;YAChC,CAAC;SACF;QAED,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEM,oCAAc,GAArB,UAAsB,QAAkB;QACtC,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;QAE/B,GAAG,CAAC,CAAe,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ;YAAtB,IAAI,MAAM;YACb,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC;gBACjC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;SACF;QAED,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEM,iDAA2B,GAAlC,UAAmC,UAA8B;QAC/D,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,GAAG,CAAC,CAAkB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;YAA3B,IAAI,SAAS;YAChB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACpC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YACtC,CAAC;YAED,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAChD;QAED,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IACH,4BAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/C8C;AAQ/C,IAAa,cAAc;IAYzB;IACA,CAAC;IAED,iCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,oCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;IAChC,CAAC;IAED,kCAAS,GAAT;QACE,EAAE,EAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,KAAK,GAAW;YACnB,OAAO,EAAE,IAAI,CAAC,aAAa;YAC3B,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,KAAK;YACjB,WAAW,EAAE,KAAK;YAClB,gBAAgB,EAAE,IAAI,CAAC,aAAa;SACrC,CAAC;QAEF,IAAI,CAAC,oBAAoB,GAAG,IAAI,IAAI,EAAE,CAAC;IACzC,CAAC;IAED,mCAAU,GAAV;QACE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,qCAAY,GAAZ;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,mCAAU,GAAV;QACE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,oCAAW,GAAX;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,kCAAS,GAAT;QAAA,iBAaC;QAZC,UAAU,CAAC;YACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC;YAAC,CAAC;YACrC,KAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;YAC9B,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpC,KAAI,CAAC,SAAS,EAAE,CAAC;YACnB,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC9B,KAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,KAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IACH,qBAAC;AAAD,CAAC;AArEC;IADC,mFAAK,EAAE;;qDACqB;AAG7B;IADC,mFAAK,EAAE;;gDACoB;AANjB,cAAc;IAJ1B,yFAAS,CAAC;QACT,QAAQ,EAAE,OAAO;QACjB,kCAAmC;KACpC,CAAC;;GACW,cAAc,CAwE1B;AAxE0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR3B;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;;;;;;;;;;;;ACN+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,4FAAc,EAAE,CAAC;AACnB,CAAC;AAED,wHAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVV;AAQ1C,IAAa,YAAY;IAAzB;IAEA,CAAC;IAAD,mBAAC;AAAD,CAAC;AAFY,YAAY;IALxB,yFAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,kCAAmC;QACnC,kCAAkC;KACnC,CAAC;GACW,YAAY,CAExB;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR6B;AACb;AACM;AAC2D;AAC5B;AACf;AACqB;AACO;AACP;AAC3B;AACQ;AACE;AACqB;AACtB;AACR;AACJ;AAC6B;AAC3B;AAC6C;AACxD;AACoD;AAC/B;AACR;AAC6B;AACN;AACE;AACN;AACb;AACO;AAChB;AACD;AACmD;AAGzG,IAAM,SAAS,GAAU;IACvB;QACE,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,4EAAa;KACzB;IACD;QACE,IAAI,EAAE,EAAE;QACR,UAAU,EAAE,OAAO;QACnB,SAAS,EAAE,MAAM;KAClB;CACF,CAAC;AA+CF,IAAa,SAAS;IAAtB;IAAyB,CAAC;IAAD,gBAAC;AAAD,CAAC;AAAb,SAAS;IA5CrB,sFAAQ,CAAC;QACR,YAAY,EAAE;YACZ,oEAAY;YACZ,4EAAa;YACb,+HAA6B;YAC7B,oFAAgB;YAChB,yGAAmB;YACnB,gHAAsB;YACtB,yGAAmB;YACnB,8EAAQ;YACR,uFAAY;YACZ,yFAAa;YACb,8GAAuB;YACvB,wFAAiB;YACjB,2HAA4B;YAC5B,mGAAgB;YAChB,uHAA2B;YAC3B,+HAAiC;YAEjC,QAAQ;YACR,mEAAQ;YACR,6GAA4B;YAC5B,yGAA0B;YAC1B,uGAAyB;YACzB,mGAAuB;YACvB,sFAAgB;SACjB;QACD,OAAO,EAAE;YACP,2EAAY;YAEZ,SAAS;YACT,sEAAY,CAAC,OAAO,CAAC,SAAS,CAAC;SAChC;QACD,SAAS,EAAE;YACT,gFAAa;YACb,4EAAW;YACX,6FAAmB;YACnB,yGAAyB;YACzB,8EAAY;YACZ,wFAAiB;YACjB,gFAAa;SACd;QACD,SAAS,EAAE,CAAC,oEAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;AC3FuC;AACN;AAC6B;AACnB;AAEE;AACR;AAG3D;;;;;GAKG;AAKH,IAAa,gBAAgB;IA0B3B,0BACS,aAA4B,EAC5B,yBAAoD,EACnD,WAAwB,EACxB,iBAAoC;QAHrC,kBAAa,GAAb,aAAa,CAAe;QAC5B,8BAAyB,GAAzB,yBAAyB,CAA2B;QACnD,gBAAW,GAAX,WAAW,CAAa;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QAE5C,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IACrC,CAAC;IAEM,mCAAQ,GAAf;QAAA,iBAWC;QATC,mCAAmC;QACnC,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAAC,UAAC,YAAY;YAC/D,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,KAAI,CAAC,yBAAyB,CAAC,kBAAkB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAEpE,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED;;;OAGG;IACI,wCAAa,GAApB;QACE,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;IAED;;;OAGG;IACI,+CAAoB,GAA3B,UAA4B,IAAa;QACvC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,MAAM;QACN,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YACR,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,IAAI;YACF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;IAC5B,CAAC;IAEM,yCAAc,GAArB,UAAsB,GAAuB;QAC3C,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;QACrC,IAAI,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACxD,CAAC;IAEO,oCAAS,GAAjB;QAAA,iBAKC;QAJC,UAAU,CAAC;YACT,KAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YACpD,KAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAED,+BAAI,GAAJ;QACE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC;IACH,uBAAC;AAAD,CAAC;AA9DC;IADC,yFAAS,CAAC,kBAAkB,CAAC;kDACvB,qFAAc,oBAAd,qFAAc;+CAAC;AAvBX,gBAAgB;IAJ5B,yFAAS,CAAC;QACT,QAAQ,EAAE,SAAS;QACnB,kCAAuC;KACxC,CAAC;yDA4BwB,+EAAa,oBAAb,+EAAa,sDACD,wGAAyB,oBAAzB,wGAAyB,sDACtC,2EAAW,oBAAX,2EAAW,sDACL,uFAAiB,oBAAjB,uFAAiB;GA9BnC,gBAAgB,CAqF5B;AArF4B;;;;;;;;;ACjB7B;AAAA;;;;;GAKG;AACH;IAAA;IA0CA,CAAC;IAAD,kBAAC;AAAD,CAAC;;;;;;;;;AC/CD;AAAA;;;GAGG;AACH;IAAA;IAgBA,CAAC;IAAD,yBAAC;AAAD,CAAC;;;;;;;;;ACpBD;AAAA;;;;GAIG;AACH;IA2BE,yBAAY,IAAa,EAAE,MAAgB,EAAE,MAAc;QACzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAGH,sBAAC;AAAD,CAAC;;;;;;;;;ACzCD;AAAA;;;;GAIG;AACH;IAAA;IA+BA,CAAC;IAAD,uBAAC;AAAD,CAAC;;;;;;;;;ACpCD;AAAA;;;GAGG;AACH,IAAK,YAEJ;AAFD,WAAK,YAAY;IACf,+CAAI;IAAE,mDAAM;IAAE,6CAAG;IAAE,mDAAM;IAAE,mDAAM;IAAE,iDAAK;AAC1C,CAAC,EAFI,YAAY,KAAZ,YAAY,QAEhB;AAED;;;GAGG;AACH;IAiBE,0BAAY,MAAc,EAAE,eAAuB,EAAE,QAAkB;QACrE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,eAAe,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,KAAK,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,qCAAoB,GAA3B;QACE,MAAM,CAAC;YACL,MAAM,EAAE,CAAC;YACT,GAAG,EAAE,CAAC;YACN,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,CAAC;YACT,KAAK,EAAE,CAAC;SACT;IACH,CAAC;IACH,uBAAC;AAAD,CAAC;;;;;;;;;AC9CD;AAAA;;;;;;;;;;;;;;;;;GAiBG;AACH;IAmBE;QACE,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAChC,CAAC;IACH,mBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;AC5CiD;AACK;AAC6B;AAOpF,IAAa,aAAa;IAKxB,uBAAoB,yBAAoD,EAAU,WAAwB;QAAtF,8BAAyB,GAAzB,yBAAyB,CAA2B;QAAU,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IAExG,gCAAQ,GAAf;QAAA,iBAQC;QAPC,mCAAmC;QACnC,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAAC,UAAC,YAAY;YAC/D,KAAI,CAAC,yBAAyB,CAAC,YAAY,GAAG,YAAY,CAAC;YAC3D,KAAI,CAAC,yBAAyB,CAAC,kBAAkB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAEpE,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;IACH,oBAAC;AAAD,CAAC;AAhBY,aAAa;IAJzB,yFAAS,CAAC;QACT,QAAQ,EAAE,MAAM;QAChB,kCAAoC;KACrC,CAAC;yDAM+C,wGAAyB,oBAAzB,wGAAyB,sDAAuB,2EAAW,oBAAX,2EAAW;GAL/F,aAAa,CAgBzB;AAhByB;;;;;;;;;;;;;;;;;;;;;ACT0B;AAEe;AAGnE;;;;;;GAMG;AAEH,IAAa,4BAA4B;IAEvC,sCAAoB,gBAAmC;QAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;IAEvD,CAAC;IAED;;;;;;;OAOG;IACH,gDAAS,GAAT,UAAU,UAA8B,EAAE,QAAiB;QACzD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC;QAED,IAAI,kBAAkB,GAAG,EAAE,CAAC;QAE5B,GAAG,CAAC,CAAkB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;YAA3B,IAAI,SAAS;YAChB,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC;gBACnC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrC,CAAC;SACF;QAED,MAAM,CAAC,kBAAkB,CAAC;IAC5B,CAAC;IACH,mCAAC;AAAD,CAAC;AAjCY,4BAA4B;IADxC,kFAAI,CAAC,EAAE,IAAI,EAAE,4BAA4B,EAAE,CAAC;yDAGL,uFAAiB,oBAAjB,uFAAiB;GAF5C,4BAA4B,CAiCxC;AAjCwC;;;;;;;;;;;;;;;;;ACbW;AAIpD;;;;;;GAMG;AAEH,IAAa,0BAA0B;IAAvC;IAgCA,CAAC;IA9BC;;;;;;;OAOG;IACH,8CAAS,GAAT,UAAU,UAA8B,EAAE,QAAmB;QAC3D,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,UAAU,CAAC;QACpB,CAAC;QAED,IAAM,kBAAkB,GAAG,EAAE,CAAC;QAE9B,GAAG,CAAC,CAAoB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;YAA7B,IAAM,SAAS;YAClB,GAAG,CAAC,CAAyB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ;gBAAhC,IAAM,cAAc;gBACvB,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,KAAK,cAAc,CAAC,CAAC,CAAC;oBACvC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBACnC,KAAK,CAAC;gBACR,CAAC;aACF;SACF;QAED,MAAM,CAAC,kBAAkB,CAAC;IAC5B,CAAC;IACH,iCAAC;AAAD,CAAC;AAhCY,0BAA0B;IADtC,kFAAI,CAAC,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC;GAC9B,0BAA0B,CAgCtC;AAhCsC;;;;;;;;;;;;;;;;;;;;ACZa;AAEe;AAGnE;;;;;;GAMG;AAEH,IAAa,yBAAyB;IAEpC,mCAAoB,gBAAmC;QAAnC,qBAAgB,GAAhB,gBAAgB,CAAmB;IACvD,CAAC;IAED;;;;;;;OAOG;IACH,6CAAS,GAAT,UAAU,YAA2B,EAAE,QAAiB;QACtD,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC;QAED,IAAI,oBAAoB,GAAG,EAAE,CAAC;QAE9B,GAAG,CAAC,CAAa,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY;YAAxB,IAAI,IAAI;YACX,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC;gBAC1D,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,CAAC;SACF;QAED,MAAM,CAAC,oBAAoB,CAAC;IAC9B,CAAC;IACH,gCAAC;AAAD,CAAC;AAhCY,yBAAyB;IADrC,kFAAI,CAAC,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC;yDAGF,uFAAiB,oBAAjB,uFAAiB;GAF5C,yBAAyB,CAgCrC;AAhCqC;;;;;;;;;;;;;;;;;ACbc;AAIpD;;;;;;GAMG;AAEH,IAAa,uBAAuB;IAApC;IA+BA,CAAC;IA7BC;;;;;;;OAOG;IACH,2CAAS,GAAT,UAAU,YAA2B,EAAE,MAAiB;QACtD,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC;QAED,IAAM,oBAAoB,GAAG,EAAE,CAAC;QAEhC,GAAG,CAAC,CAAe,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY;YAA1B,IAAM,IAAI;YACb,GAAG,CAAC,CAAyB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;gBAA9B,IAAM,cAAc;gBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,cAAc,CAAC,CAAC,CAAC;oBAC9D,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,CAAC;aACF;SACF;QAED,MAAM,CAAC,oBAAoB,CAAC;IAC9B,CAAC;IACH,8BAAC;AAAD,CAAC;AA/BY,uBAAuB;IADnC,kFAAI,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC;GAC3B,uBAAuB,CA+BnC;AA/BmC;;;;;;;;;;;;;;;;ACZgB;AAGpD;;;;;GAKG;AAEH,IAAa,QAAQ;IAArB;IAQA,CAAC;IAPC,4BAAS,GAAT,UAAU,KAAK,EAAE,IAAc;QAC7B,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,eAAC;AAAD,CAAC;AARY,QAAQ;IADpB,kFAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;GACV,QAAQ,CAQpB;AARoB;;;;;;;;;;;;;;;;;;;;ACV+B;AACe;AAGnE;;;;;;;;GAQG;AAIH,IAAa,gBAAgB;IAE3B,0BAAoB,UAAwB;QAAxB,eAAU,GAAV,UAAU,CAAc;IAAE,CAAC;IAE/C,oCAAS,GAAT,UAAU,CAAS;QACjB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IACH,uBAAC;AAAD,CAAC;AAPY,gBAAgB;IAH5B,kFAAI,CAAC;QACJ,IAAI,EAAE,cAAc;KACrB,CAAC;yDAGgC,+EAAY,oBAAZ,+EAAY;GAFjC,gBAAgB,CAO5B;AAP4B;;;;;;;;;;;;;;;;;;;;;;AChBqB;AAEiB;AACiB;AAOpF,IAAa,mBAAmB;IAK9B,6BAAoB,yBAAoD,EAAU,iBAAoC;QAAlG,8BAAyB,GAAzB,yBAAyB,CAA2B;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;IACtH,CAAC;IAGM,sCAAQ,GAAf;QAAA,iBAIC;QAHC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,qCAAO,GAAd;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;IAC3D,CAAC;IAEM,uCAAS,GAAhB,UAAiB,QAAyB;QACxC,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3C,CAAC;IAED,yCAAW,GAAX,UAAY,KAAY;QACtB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC;IACH,0BAAC;AAAD,CAAC;AA3BY,mBAAmB;IAJ/B,yFAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,kCAAwC;KACzC,CAAC;yDAM+C,wGAAyB,oBAAzB,wGAAyB,sDAA6B,uFAAiB,oBAAjB,uFAAiB;GAL3G,mBAAmB,CA2B/B;AA3B+B;;;;;;;;;;;;;;;;;;;;;ACVU;AACa;AAGvD;;GAEG;AAMH,IAAa,gBAAgB;IAO3B,0BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAE5C,CAAC;IAED,wCAAa,GAAb;QACE,IAAI,CAAC,WAAW,CAAC,YAAY,CAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAE,CAAC;IACrE,CAAC;IACH,uBAAC;AAAD,CAAC;AAdY,gBAAgB;IAL5B,yFAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,kCAAqC;QACrC,kCAAoC;KACrC,CAAC;yDAQiC,2EAAW,oBAAX,2EAAW;GAPjC,gBAAgB,CAc5B;AAd4B;;;;;;;;;;;;;;;;;;;;;ACZmB;AACkC;AAOlF,IAAa,6BAA6B;IAMxC,uCAAoB,yBAAoD;QAApD,8BAAyB,GAAzB,yBAAyB,CAA2B;IACxE,CAAC;IAGM,gDAAQ,GAAf;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC;IAClE,CAAC;IACH,oCAAC;AAAD,CAAC;AAdY,6BAA6B;IAJzC,yFAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,kCAAsD;KACvD,CAAC;yDAO+C,wGAAyB,oBAAzB,wGAAyB;GAN7D,6BAA6B,CAczC;AAdyC;;;;;;;;;;;;;;;;;;;;;;;ACRQ;AACkC;AACpB;AACL;AAO3D,IAAa,mBAAmB;IAK9B,6BAAoB,yBAAoD,EAAU,aAA4B;QAA1F,8BAAyB,GAAzB,yBAAyB,CAA2B;QAAU,kBAAa,GAAb,aAAa,CAAe;IAAI,CAAC;IAE5G,sCAAQ,GAAf;QAAA,iBAIC;QAHC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,qCAAO,GAAd;QACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,IAAI,eAAe,GAAG,oFAAgB,CAAC,oBAAoB,EAAE,CAAC;QAC9D,GAAG,CAAC,CAAkB,UAA4D,EAA5D,SAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,UAAU,EAA5D,cAA4D,EAA5D,IAA4D;YAA7E,IAAI,SAAS;YAChB,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtC,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACvC,CAAC;YAED,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACvC;QAED,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QAE/C,4DAA4D;QAC5D,GAAG,CAAC,CAAC,IAAI,MAAM,IAAI,eAAe,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,oFAAgB,CAAC,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACnH,CAAC;IACH,CAAC;IAEM,6CAAe,GAAtB,UAAuB,MAAwB;QAC7C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAEM,gDAAkB,GAAzB,UAA0B,MAAwB;QAChD,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,yCAAW,GAAX,UAAY,KAAY;QACtB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAEjC,+BAA+B;QAC/B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,WAAI,CAAC,QAAQ,GAAG,KAAK,EAArB,CAAqB,CAAC,CAAC;IAC3D,CAAC;IACH,0BAAC;AAAD,CAAC;AAlDY,mBAAmB;IAJ/B,yFAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,kCAAwC;KACzC,CAAC;yDAM+C,wGAAyB,oBAAzB,wGAAyB,sDAAyB,+EAAa,oBAAb,+EAAa;GALnG,mBAAmB,CAkD/B;AAlD+B;;;;;;;;;;;;;;;;;;;;;;ACVkB;AACkC;AAEzB;AAO3D,IAAa,sBAAsB;IAKjC,gCAAoB,aAA4B,EAAU,yBAAoD;QAA1F,kBAAa,GAAb,aAAa,CAAe;QAAU,8BAAyB,GAAzB,yBAAyB,CAA2B;IAAI,CAAC;IAEnH,yCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,wCAAO,GAAd;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;QAEvD,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,gBAAgB,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED,6CAAY,GAAZ,UAAa,MAAc;QACzB,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,gDAAe,GAAf,UAAgB,MAAc;QAC5B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;IACH,6BAAC;AAAD,CAAC;AA7BY,sBAAsB;IAJlC,yFAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,kCAA4C;KAC7C,CAAC;yDAMmC,+EAAa,oBAAb,+EAAa,sDAAqC,wGAAyB,oBAAzB,wGAAyB;GALnG,sBAAsB,CA6BlC;AA7BkC;;;;;;;;;;;;;;;;;ACVQ;AAG3C;;GAEG;AAEH,IAAa,mBAAmB;IADhC;QAGE,SAAI,GAAG,MAAM,CAAC;QACd,WAAM,GAAG,QAAQ,CAAC;QAClB,QAAG,GAAG,KAAK,CAAC;QACZ,WAAM,GAAG,QAAQ,CAAC;QAClB,WAAM,GAAG,QAAQ,CAAC;QAClB,UAAK,GAAG,OAAO,CAAC;QAEhB,WAAM,GAAG;YACP,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG;YAChC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK;SACrC,CAAC;IAaJ,CAAC;IAXC;;OAEG;IACH,0CAAY,GAAZ,UAAa,IAAY;QACvB,GAAG,CAAC,CAAc,UAAW,EAAX,SAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW;YAAxB,IAAI,KAAK;YACZ,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC9B,MAAM,CAAC,KAAK,CAAC;SAChB;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACH,0BAAC;AAAD,CAAC;AAzBY,mBAAmB;IAD/B,wFAAU,EAAE;GACA,mBAAmB,CAyB/B;AAzB+B;;;;;;;;;;;;;;;;;;;;ACPkB;AACK;AAQvD,IAAa,iBAAiB;IAK5B,2BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAC5C,CAAC;IAED,oCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC,SAAS,CAAC,UAAE,aAAa;YAClE,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IACH,wBAAC;AAAD,CAAC;AAbY,iBAAiB;IAL7B,yFAAS,CAAC;QACT,QAAQ,EAAE,UAAU;QACpB,kCAAsC;QACtC,kCAAqC;KACtC,CAAC;yDAMiC,2EAAW,oBAAX,2EAAW;GALjC,iBAAiB,CAa7B;AAb6B;;;;;;;;;;;;;;;;;;;;;ACTY;AACgB;AAO1D,IAAa,4BAA4B;IAOvC,sCAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAC1C,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,gCAAgC,GAAG,CAAC,CAAC;IAC5C,CAAC;IAGM,wDAAiB,GAAxB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,gCAAgC,GAAG,EAAE,CAAC;QAE3C,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;QAErC,iBAAiB;QACjB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEM,0DAAmB,GAA1B;QACE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,gCAAgC,GAAG,CAAC,CAAC;QAE1C,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;IACzC,CAAC;IAEO,gDAAS,GAAjB;QAAA,iBAYC;QAXC,UAAU,CAAC;YACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC;YAAC,CAAC;YAEzC,KAAI,CAAC,gCAAgC,EAAE,CAAC;YACxC,EAAE,CAAC,CAAC,KAAI,CAAC,gCAAgC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9C,KAAI,CAAC,SAAS,EAAE,CAAC;YACnB,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC,EAAE,KAAK,CAAC,CAAC;IACZ,CAAC;IACH,mCAAC;AAAD,CAAC;AAlDY,4BAA4B;IAJxC,yFAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,kCAAoD;KACrD,CAAC;yDAQiC,2EAAW,oBAAX,2EAAW;GAPjC,4BAA4B,CAkDxC;AAlDwC;;;;;;;;;;;;;;;;;;;;;ACRA;AACiB;AACQ;AACvB;AACY;AAyBvD,IAAa,YAAY;IAAzB;IAA4B,CAAC;IAAD,mBAAC;AAAD,CAAC;AAAhB,YAAY;IAtBxB,sFAAQ,CAAC;QACP,YAAY,EAAE;YACV,8EAAc;SACjB;QACD,OAAO,EAAE;YACL,gFAAa;YACb,mEAAW;YACX,2EAAmB;YACnB,iEAAU;SACb;QACD,OAAO,EAAE;YACL,iBAAiB;YACjB,gFAAa;YACb,mEAAW;YACX,2EAAmB;YACnB,iEAAU;YAEV,oBAAoB;YACpB,8EAAc;SACjB;QACD,SAAS,EAAE,EAAE;KACf,CAAC;GACW,YAAY,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7B6E;AAC1D;AAEW;AAC6B;AAC3B;AAUzD,IAAa,YAAY;IAAS,gCAAM;IAWtC,sBAAoB,WAAwB,EAAU,yBAAoD,EAAU,YAA0B;QAA9I,YACE,iBAAO,SAIR;QALmB,iBAAW,GAAX,WAAW,CAAa;QAAU,+BAAyB,GAAzB,yBAAyB,CAA2B;QAAU,kBAAY,GAAZ,YAAY,CAAc;QAG5I,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,KAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;;IACrC,CAAC;IAED,+BAAQ,GAAR;QAAA,iBASC;QARC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC,CAAC;QAE3F,iBAAiB;QACjB,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,MAAM;YAC7G,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sCAAe,GAAf;QAAA,iBAOC;QANC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,UAAE,KAAK;YAClC,IAAI,YAAY,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YACnC,EAAE,CAAC,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC1B,KAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YACnD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,uCAAgB,GAAvB,UAAwB,MAAe,EAAE,UAAwB;QAC/D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAEM,oCAAa,GAApB,UAAqB,MAAe,EAAE,UAAwB;QAC5D,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED,mCAAY,GAAZ,UAAa,KAAK,EAAE,KAAK;QACvB,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC;QAEjC,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEtC,mCAAmC;QACnC,IAAI,gBAAgB,CAAC;QACrB,GAAG,CAAC,CAAiB,UAAoB,EAApB,SAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAApB,cAAoB,EAApB,IAAoB;YAApC,IAAI,QAAQ;YACf,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBACnE,gBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC/D,KAAK,CAAC;YACR,CAAC;SACF;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACpC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YACnD,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,gBAAgB,GAAG,gBAAgB,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC;YACjF,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,gBAAgB,GAAG,gBAAgB,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;YACvF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC9B,CAAC;QAED,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,GAAG,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC9E,CAAC;IAEM,kCAAW,GAAlB;QAAA,iBAIC;QAHC,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,MAAM;YAC7G,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;MAEE;IACK,8BAAO,GAAd;QAAA,iBAIC;QAHC,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,MAAM;YAC7G,KAAI,CAAC,aAAa,CAAC,MAAM,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IACH,mBAAC;AAAD,CAAC,CA5FiC,iEAAM,GA4FvC;AApFC;IADC,4FAAY,CAAC,WAAW,CAAC;kDACnB,kEAAS,oBAAT,kEAAS;2CAAa;AARlB,YAAY;IAJxB,yFAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,kCAA6C;KAC9C,CAAC;yDAYiC,2EAAW,oBAAX,2EAAW,sDAAqC,wGAAyB,oBAAzB,wGAAyB,sDAAwB,6EAAY,oBAAZ,6EAAY;GAXnI,YAAY,CA4FxB;AA5FwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfyB;AACK;AAC6B;AACxC;AACW;AACY;AACR;AAO3D,IAAa,aAAa;IAAS,iCAAM;IAKvC,uBAAoB,WAAwB,EACxB,yBAAoD,EACrD,iBAAoC,EACpC,aAA4B;QAH/C,YAGmD,iBAAO,SAAG;QAHzC,iBAAW,GAAX,WAAW,CAAa;QACxB,+BAAyB,GAAzB,yBAAyB,CAA2B;QACrD,uBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAa,GAAb,aAAa,CAAe;;IAAa,CAAC;IAE7D,gCAAQ,GAAR;QAAA,iBAKC;QAJC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAEvF,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,+BAAO,GAAd;QAAA,iBAkBC;QAjBC,sDAAsD;QACtD,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,YAAY;YACpH,KAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YAEvB,GAAG,CAAC,CAAoB,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY;gBAA/B,IAAI,WAAW;gBAClB,IAAI,IAAI,GAAG,IAAI,2EAAW,EAAE,CAAC;gBAC7B,IAAI,CAAC,SAAS,GAAG,KAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;gBACxF,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;gBACvC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;gBACvC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;gBACvC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;gBAC7C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;gBAC3C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;gBAE3C,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC9B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,oBAAC;AAAD,CAAC,CApCkC,iEAAM,GAoCxC;AApCY,aAAa;IAJzB,yFAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,kCAA8C;KAC/C,CAAC;yDAMiC,2EAAW,oBAAX,2EAAW,sDACG,wGAAyB,oBAAzB,wGAAyB,sDAClC,uFAAiB,oBAAjB,uFAAiB,sDACrB,+EAAa,oBAAb,+EAAa;GARpC,aAAa,CAoCzB;AApCyB;;;;;;;;;;;;;;;;;;;;;;;;ACbmF;AACrC;AACJ;AAGV;AACE;AAO5D,IAAa,iCAAiC;IAmB5C,2CACU,WAAwB,EACxB,YAA0B;QAD1B,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAc;IAEpC,CAAC;IAED,oDAAQ,GAAR;QAAA,iBAaC;QAZC,6BAA6B;QAC7B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC,SAAS,CAAC,UAAE,UAAU;YACjG,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,oCAAoC;QACpC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC,SAAS,CAAC,UAAE,KAAK;YAClG,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED,2DAAe,GAAf;QAAA,iBAMC;QALC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,UAAE,KAAK;YACvC,EAAE,CAAC,CAAC,KAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACrC,KAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACjE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kEAAsB,GAA7B,UAA+B,KAAK,EAAE,eAAuB;QAA7D,iBAsBC;QArBC,8BAA8B;QAC9B,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;QAErC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,qEAAqE;YACrE,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACjD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,+DAA+D;YAC/D,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACjE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAE,CAAC,SAAS,CAAC,UAAE,MAAM;YAC9H,KAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAChC,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4DAAgB,GAAvB,UAAwB,MAAe,EAAE,UAAwB;QAC/D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;QACT,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IACH,wCAAC;AAAD,CAAC;AA9EC;IADC,mFAAK,EAAE;kDACK,yFAAkB,oBAAlB,yFAAkB;sEAAC;AAGhC;IADC,mFAAK,EAAE;kDACG,qFAAgB,oBAAhB,qFAAgB;oEAAC;AAU5B;IADC,4FAAY,CAAC,WAAW,CAAC;kDACd,kEAAS,oBAAT,kEAAS;qEAAa;AAhBvB,iCAAiC;IAJ7C,yFAAS,CAAC;QACT,QAAQ,EAAE,4BAA4B;QACtC,kCAAwD;KACzD,CAAC;yDAqBuB,2EAAW,oBAAX,2EAAW,sDACV,6EAAY,oBAAZ,6EAAY;GArBzB,iCAAiC,CAiF7C;AAjF6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbwD;AAC1D;AAE8B;AACU;AAC7B;AACY;AACR;AAGF;AAgBzD,IAAa,2BAA2B;IAAS,+CAAM;IA0BrD,qCACU,WAAwB,EACxB,yBAAoD,EACrD,iBAAoC,EACpC,aAA4B,EAC3B,YAA0B;QALpC,YAOE,iBAAO,SAGR;QATS,iBAAW,GAAX,WAAW,CAAa;QACxB,+BAAyB,GAAzB,yBAAyB,CAA2B;QACrD,uBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAa,GAAb,aAAa,CAAe;QAC3B,kBAAY,GAAZ,YAAY,CAAc;QAGlC,KAAI,CAAC,cAAc,GAAG,8FAAqB,CAAC;QAC5C,KAAI,CAAC,qBAAqB,EAAE,CAAC;;IAC/B,CAAC;IAED,8CAAQ,GAAR;QAAA,iBAQC;QAPC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC;YAC/D,KAAI,CAAC,OAAO,EAAE,CAAC;YACf,KAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,qDAAe,GAAf;QAAA,iBAMC;QALC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,UAAE,KAAK;YACvC,EAAE,CAAC,CAAC,KAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACrC,KAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;YAChD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qEAA+B,GAA/B,UAAiC,aAAqB;QAAtD,iBA2BC;QA1BE,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAErC,4CAA4C;QAC5C,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAE,CAAC,SAAS,CACjG,UAAE,SAAS;YACT,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAE3B,2CAA2C;YAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBACjC,KAAI,CAAC,kBAAkB,CAAE,aAAa,CAAE,CAAC;gBAC3C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBACxC,KAAI,CAAC,oBAAoB,CAAE,aAAa,CAAE,CAAC;gBAC7C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;oBAChC,KAAI,CAAC,wBAAwB,CAAE,aAAa,CAAE,CAAC;gBACjD,CAAC;YACH,CAAC;YAED,KAAI,CAAC,oBAAoB,CAAE,aAAa,CAAE,CAAC;QAC7C,CAAC,EACD,UAAE,KAAK;YACL,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC,CACF,CAAC;IACJ,CAAC;IAEM,wDAAkB,GAAzB,UAA2B,aAAa;QAAxC,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,UAAU;gBAC/F,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC/B,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEM,0DAAoB,GAA3B,UAA6B,aAAa;QAA1C,iBASC;QARC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,KAAK;gBAChG,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,qCAAqC;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAEM,8DAAwB,GAA/B,UAAiC,aAAa;QAA9C,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,SAAS;gBACxG,KAAI,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEM,0DAAoB,GAA3B,UAA6B,aAAa;QAA1C,iBAIC;QAHC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,OAAsB;YACjH,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4DAAsB,GAA7B,UAA+B,KAAK,EAAE,aAAqB,EAAE,eAAuB;QAApF,iBAwCC;QAvCC,IAAI,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC;QACnE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC;QACT,CAAC;QAED,8BAA8B;QAC9B,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;QAErC,uCAAuC;QACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QAClD,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,qEAAqE;YACrE,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,+DAA+D;YAC/D,IAAI,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACnF,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAE,UAAU,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAE,CAAC,SAAS,CAAC,UAAE,MAAM;YACpI,KAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAChC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC;YAElD,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,aAAa;QACb,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,KAAiB;YAC9C,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YACpE,EAAE,CAAC,CAAC,YAAY,CAAC;gBAAC,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,sDAAgB,GAAvB,UAAwB,MAAe;QACrC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC;QACT,CAAC;gCAEQ,KAAK;YACZ,IAAI,QAAQ,GAAG,OAAK,UAAU,CAAC,IAAI,CAAC,UAAC,OAAO;gBAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,OAAK,YAAY,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACrD,CAAC;;QAND,GAAG,CAAC,CAAc,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;YAAnB,IAAI,KAAK;oBAAL,KAAK;SAMb;IACH,CAAC;IAEM,kEAA4B,GAAnC;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAEM,2DAAqB,GAA5B;QACE,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;IAC3C,CAAC;IAEM,6CAAO,GAAd;QACE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC;QAC5E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAC/E,IAAI,CAAC,UAAU,GAAG,8FAAqB,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAErF,qDAAqD;QACrD,UAAU,CAAC;YACT,mBAAmB,EAAE,CAAC;QACxB,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IACH,kCAAC;AAAD,CAAC,CArMgD,iEAAM,GAqMtD;AAjLC;IADC,4FAAY,CAAC,WAAW,CAAC;kDACd,kEAAS,oBAAT,kEAAS;+DAAa;AAGlC;IADC,4FAAY,CAAC,0BAA0B,CAAC;kDACvB,kEAAS,oBAAT,kEAAS;qEAAa;AAvB7B,2BAA2B;IAJvC,yFAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,kCAA4D;KAC7D,CAAC;yDA4BuB,2EAAW,oBAAX,2EAAW,sDACG,wGAAyB,oBAAzB,wGAAyB,sDAClC,uFAAiB,oBAAjB,uFAAiB,sDACrB,+EAAa,oBAAb,+EAAa,sDACb,6EAAY,oBAAZ,6EAAY;GA/BzB,2BAA2B,CAqMvC;AArMuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1B8D;AAC1D;AAE8B;AACU;AAC7B;AACI;AACQ;AAEV;AASzD;IAAA;IAIA,CAAC;IAAD,mCAAC;AAAD,CAAC;AAUD,IAAa,uBAAuB;IAAS,2CAAM;IAyBjD,iCACU,WAAwB,EACxB,yBAAoD,EACpD,iBAAoC,EACpC,aAA4B,EAC5B,YAA0B;QALpC,YAOE,iBAAO,SAGR;QATS,iBAAW,GAAX,WAAW,CAAa;QACxB,+BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,uBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAa,GAAb,aAAa,CAAe;QAC5B,kBAAY,GAAZ,YAAY,CAAc;QAGlC,KAAI,CAAC,cAAc,GAAG,8FAAqB,CAAC;QAC5C,KAAI,CAAC,4BAA4B,EAAE,CAAC;;IACtC,CAAC;IAGD,0CAAQ,GAAR;QAAA,iBAQC;QAPC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC;YAC/D,KAAI,CAAC,OAAO,EAAE,CAAC;YACf,KAAI,CAAC,4BAA4B,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,iDAAe,GAAf;QAAA,iBAMC;QALC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,UAAE,KAAK;YACvC,EAAE,CAAC,CAAC,KAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;gBACrC,KAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;YAChD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iEAA+B,GAA/B,UAAiC,aAAqB;QAAtD,iBAoBC;QAnBC,4CAA4C;QAC5C,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAE,CAAC,SAAS,CAAC,UAAE,SAAS;YAC7G,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAE3B,2CAA2C;YAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBACjC,KAAI,CAAC,kBAAkB,CAAE,aAAa,CAAE,CAAC;gBAC3C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;oBACxC,KAAI,CAAC,oBAAoB,CAAE,aAAa,CAAE,CAAC;gBAC7C,CAAC;gBACD,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;oBAChC,KAAI,CAAC,wBAAwB,CAAE,aAAa,CAAE,CAAC;gBACjD,CAAC;YACH,CAAC;YAED,KAAI,CAAC,oBAAoB,CAAE,aAAa,CAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,oDAAkB,GAAzB,UAA2B,aAAa;QAAxC,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,UAAU;gBAC/F,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC/B,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEM,sDAAoB,GAA3B,UAA6B,aAAa;QAA1C,iBASC;QARC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,KAAK;gBAChG,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,qCAAqC;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAEM,0DAAwB,GAA/B,UAAiC,aAAa;QAA9C,iBAMC;QALC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,SAAS;gBACxG,KAAI,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEM,wDAAsB,GAA7B,UAA+B,KAAK,EAAE,aAAqB,EAAE,eAAuB;QAApF,iBAwCC;QAvCC,IAAI,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC;QACnE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC;QACT,CAAC;QAED,8BAA8B;QAC9B,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;QAErC,uCAAuC;QACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QAClD,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,qEAAqE;YACrE,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjF,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,+DAA+D;YAC/D,IAAI,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACnF,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAE,UAAU,CAAC,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAE,CAAC,SAAS,CAAC,UAAE,MAAM;YACpI,KAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;YAChC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC;YAElD,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,aAAa;QACb,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,KAAiB;YAC9C,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YACpE,EAAE,CAAC,CAAC,YAAY,CAAC;gBAAC,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,sDAAoB,GAA3B,UAA6B,aAAa;QAA1C,iBAIC;QAHC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,SAAS,CAAC,UAAC,OAAsB;YACjH,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kDAAgB,GAAvB,UAAwB,MAAe;QACrC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC;QACT,CAAC;gCAEQ,KAAK;YACZ,IAAI,QAAQ,GAAG,OAAK,UAAU,CAAC,IAAI,CAAC,UAAC,OAAO;gBAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC;YACjD,CAAC,CAAC,CAAC;YAEH,OAAK,YAAY,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACrD,CAAC;;QAND,GAAG,CAAC,CAAc,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;YAAnB,IAAI,KAAK;oBAAL,KAAK;SAMb;IACH,CAAC;IAEM,8DAA4B,GAAnC;QACE,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;IAC3C,CAAC;IAEM,yCAAO,GAAd;QACE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC;QAC5E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAC/E,IAAI,CAAC,UAAU,GAAG,8FAAqB,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAErF,qDAAqD;QACrD,UAAU,CAAC;YACT,mBAAmB,EAAE,CAAC;QACxB,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IACH,8BAAC;AAAD,CAAC,CAvL4C,iEAAM,GAuLlD;AApKC;IADC,4FAAY,CAAC,WAAW,CAAC;kDACd,kEAAS,oBAAT,kEAAS;2DAAa;AAGlC;IADC,4FAAY,CAAC,0BAA0B,CAAC;kDACvB,kEAAS,oBAAT,kEAAS;iEAAa;AAtB7B,uBAAuB;IAJnC,yFAAS,CAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,kCAAuD;KACxD,CAAC;yDA2BuB,2EAAW,oBAAX,2EAAW,sDACG,wGAAyB,oBAAzB,wGAAyB,sDACjC,uFAAiB,oBAAjB,uFAAiB,sDACrB,+EAAa,oBAAb,+EAAa,sDACd,6EAAY,oBAAZ,6EAAY;GA9BzB,uBAAuB,CAuLnC;AAvLmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCM;AACE;AACwC;AAOpF,IAAa,QAAQ;IAAS,4BAAM;IAKlC,kBAAoB,yBAAoD;QAAxE,YACE,iBAAO,SACR;QAFmB,+BAAyB,GAAzB,yBAAyB,CAA2B;;IAExE,CAAC;IAED,2BAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChF,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,SAAS,CAAC,cAAM,YAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,0BAAO,GAAd;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;IACnF,CAAC;IACH,eAAC;AAAD,CAAC,CAlB6B,iEAAM,GAkBnC;AAlBY,QAAQ;IAJpB,yFAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,kCAAuC;KACxC,CAAC;yDAM+C,wGAAyB,oBAAzB,wGAAyB;GAL7D,QAAQ,CAkBpB;AAlBoB;;;;;;;;;ACTrB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEhF,mFALmF;AAK5E,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPF;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;ACXA;AACA;;;AAGA;AACA,sCAAuC,wBAAwB,GAAG,iBAAiB,uBAAuB,GAAG,mBAAmB,wBAAwB,iBAAiB,qBAAqB,mBAAmB,uBAAuB,GAAG,UAAU,8BAA8B,mBAAmB,gBAAgB,GAAG;;AAEzT;;;AAGA;AACA,2C;;;;;;ACXA;AACA;;;AAGA;AACA,mDAAoD,mBAAmB,yBAAyB,sBAAsB,sBAAsB,mBAAmB,uCAAuC,GAAG,QAAQ,sBAAsB,GAAG,YAAY,eAAe,6BAA6B,GAAG;;AAErS;;;AAGA;AACA,2C;;;;;;;;;;;;;;;;;;;ACXA,sD;;;;;;ACAA,+xBAA+xB,YAAY,0KAA0K,0EAA0E,oyCAAoyC,qCAAqC,0B;;;;;;ACAx2E,0I;;;;;;ACAA,odAAod,iBAAiB,MAAM,GAAG,8BAA8B,oF;;;;;;ACA5gB,s3B;;;;;;ACAA,8LAA8L,WAAW,gM;;;;;;ACAzM,ybAAyb,2BAA2B,kE;;;;;;ACApd,+SAA+S,eAAe,SAAS,sBAAsB,2C;;;;;;ACA7V,6TAA6T,YAAY,iIAAiI,kBAAkB,iCAAiC,sBAAsB,uCAAuC,2BAA2B,iCAAiC,sBAAsB,0LAA0L,cAAc,gCAAgC,eAAe,2FAA2F,kBAAkB,wCAAwC,oBAAoB,6OAA6O,kBAAkB,+BAA+B,uBAAuB,oHAAoH,oDAAoD,qCAAqC,8CAA8C,uCAAuC,gDAAgD,4BAA4B,uCAAuC,kHAAkH,oDAAoD,qCAAqC,8CAA8C,uCAAuC,gDAAgD,4BAA4B,uCAAuC,4B;;;;;;ACAzoE,wFAAwF,2BAA2B,iGAAiG,oCAAoC,mX;;;;;;ACAxP,gJAAgJ,sDAAsD,2JAA2J,0BAA0B,iC;;;;;;ACA3X,+UAA+U,cAAc,8VAA8V,gBAAgB,sE;;;;;;ACA3sB,gjBAAgjB,qBAAqB,qBAAqB,wBAAwB,sDAAsD,8BAA8B,4FAA4F,8BAA8B,yF;;;;;;ACAh0B,yYAAyY,8CAA8C,+BAA+B,YAAY,kBAAkB,27CAA27C,kBAAkB,gDAAgD,oBAAoB,mDAAmD,uBAAuB,mCAAmC,mCAAmC,o2BAAo2B,cAAc,sCAAsC,eAAe,uDAAuD,eAAe,sEAAsE,gBAAgB,qmBAAqmB,mBAAmB,aAAa,mBAAmB,uGAAuG,mBAAmB,slB;;;;;;ACA1+H,wTAAwT,4BAA4B,0kBAA0kB,WAAW,uJAAuJ,8BAA8B,yMAAyM,sBAAsB,GAAG,kBAAkB,gSAAgS,qYAAqY,8CAA8C,+BAA+B,YAAY,kBAAkB,oNAAoN,kBAAkB,4OAA4O,kBAAkB,gOAAgO,kBAAkB,kgBAAkgB,kBAAkB,6KAA6K,kBAAkB,imBAAimB,kBAAkB,gDAAgD,oBAAoB,mDAAmD,uBAAuB,mCAAmC,mCAAmC,ifAAif,kBAAkB,+KAA+K,kBAAkB,8TAA8T,cAAc,sCAAsC,eAAe,uDAAuD,eAAe,sEAAsE,gBAAgB,qmBAAqmB,mBAAmB,aAAa,mBAAmB,uHAAuH,mBAAmB,geAAge,kBAAkB,uCAAuC,kBAAkB,kgBAAkgB,gBAAgB,mCAAmC,kBAAkB,olB;;;;;;ACAv8O,sEAAsE,2BAA2B,0BAA0B,wEAAwE,0EAA0E,gBAAgB,2MAA2M,4BAA4B,+kBAA+kB,WAAW,uJAAuJ,8BAA8B,yMAAyM,kBAAkB,gTAAgT,qDAAqD,mBAAmB,kBAAkB,oXAAoX,gDAAgD,+BAA+B,YAAY,kBAAkB,4NAA4N,mBAAmB,kBAAkB,qPAAqP,mBAAmB,kBAAkB,yOAAyO,kBAAkB,uNAAuN,kBAAkB,ieAAie,mBAAmB,kBAAkB,qLAAqL,mBAAmB,kBAAkB,ynBAAynB,kBAAkB,gDAAgD,oBAAoB,mDAAmD,uBAAuB,mCAAmC,mCAAmC,ieAAie,mBAAmB,kBAAkB,uLAAuL,mBAAmB,kBAAkB,sUAAsU,cAAc,wCAAwC,eAAe,uDAAuD,eAAe,wEAAwE,gBAAgB,qnBAAqnB,mBAAmB,aAAa,mBAAmB,uHAAuH,mBAAmB,sfAAsf,kBAAkB,yCAAyC,kBAAkB,8gBAA8gB,gBAAgB,mCAAmC,kBAAkB,keAAke,kBAAkB,mMAAmM,kBAAkB,kkBAAkkB,qBAAqB,mCAAmC,wBAAwB,kFAAkF,8BAA8B,wHAAwH,8BAA8B,irB;;;;;;ACA3sT,4LAA4L,sBAAsB,uBAAuB,sBAAsB,yB","file":"main.bundle.js","sourcesContent":["import { Injectable, EventEmitter } from \"@angular/core\";\nimport { MoskitoApplication } from \"../entities/moskito-application\";\nimport { MoskitoComponent } from \"../entities/moskito-component\";\n\n\n@Injectable()\nexport class MoskitoApplicationService {\n\n  version: string = \"1.1.1-SNAPSHOT\";\n  configToggle: boolean = false;\n\n  applications: MoskitoApplication[];\n  currentApplication: MoskitoApplication;\n\n  dataRefreshEvent: EventEmitter<void>;\n  applicationChangedEvent: EventEmitter<void>;\n\n  /**\n   * Analog of java {@code pageContext.request.contextPath}.\n   * Contains name of tomcat web application.\n   */\n  private applicationContextPath: string;\n\n\n  constructor() {\n    this.dataRefreshEvent = new EventEmitter<void>();\n    this.applicationChangedEvent = new EventEmitter<void>();\n  }\n\n  public refreshData() {\n    this.dataRefreshEvent.emit();\n  }\n\n  public switchApplication(app: MoskitoApplication)  {\n    if (!app) return;\n    this.currentApplication = app;\n    this.applicationChangedEvent.emit();\n  }\n\n  public getComponent(componentName: string): MoskitoComponent {\n    if (!componentName) return;\n\n    for (let component of this.currentApplication.components) {\n      if (component.name == componentName)\n        return component;\n    }\n\n    return null;\n  }\n\n  public setApplicationContextPath(path: string) {\n    this.applicationContextPath = path;\n  }\n\n  public getApplicationContextPath(): string {\n    return this.applicationContextPath;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/moskito-application.service.ts","import { Injectable } from \"@angular/core\";\nimport { Http, Response, Headers } from \"@angular/http\";\nimport { Observable } from \"rxjs/Observable\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/catch\";\nimport { MoskitoApplication } from \"../entities/moskito-application\";\nimport { MoskitoComponent } from \"../entities/moskito-component\";\nimport { HistoryItem } from \"../entities/history-item\";\nimport { Chart } from \"../entities/chart\";\nimport { SystemStatus } from \"../entities/system-status\";\nimport { MoskitoApplicationService } from \"./moskito-application.service\";\nimport { Threshold } from \"../entities/threshold\";\nimport { Connector } from \"../entities/connector\";\n\n\nclass AccumulatorChartParameters {\n  application: string;\n  component: string;\n  accumulators: string[];\n\n  constructor(application: string, component: string, accumulators: string[]) {\n    this.application = application;\n    this.component = component;\n    this.accumulators = accumulators;\n  }\n}\n\n/**\n * Service responsible for communicating with Moskito-control REST services.\n * @author strel\n */\n@Injectable()\nexport class HttpService {\n\n  private url;\n  private x_www_form_urlendoed_header = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8' });\n  private json_header = new Headers({ 'Content-Type': 'application/json' });\n\n\n  constructor(private http: Http, private moskitoApplicationService: MoskitoApplicationService) {\n\n    // Subtracting path to root of application\n    let href = window.location.href;\n    let javaAppPathIndex = href.indexOf('beta');\n    this.url = href.substring(0, javaAppPathIndex == -1 ? href.length : javaAppPathIndex);\n    this.url = this.url.endsWith('/') ? this.url : this.url + '/';\n\n    this.moskitoApplicationService.setApplicationContextPath(window.location.pathname.replace('beta', ''));\n  }\n\n\n  changeServer( url: string ) {\n    this.url = url;\n    this.moskitoApplicationService.setApplicationContextPath(window.location.pathname.replace('beta', ''));\n    this.moskitoApplicationService.refreshData();\n  }\n\n  public getUrl(): string {\n    return this.url;\n  }\n\n  getMoskitoApplications(): Observable<MoskitoApplication[]> {\n    return this.http.get(this.url + 'rest/control').map((resp: Response) => {\n      return resp.json().applications;\n    });\n  }\n\n  getApplicationComponents(appName: string): Observable<MoskitoComponent[]> {\n    return this.http.get(this.url + 'rest/control').map((resp: Response) => {\n      let applications: MoskitoApplication[] = resp.json().applications;\n\n      for (let app of applications) {\n        if (app.name == appName) {\n          return app.components;\n        }\n      }\n\n      return [];\n    });\n  }\n\n  getMoskitoStatus(): Observable<SystemStatus> {\n    return this.http.get(this.url + 'rest/status').map((resp: Response) => {\n      let response = resp.json();\n      let moskitoStatus = new SystemStatus();\n\n      // Getting application statuses\n      for (let appName in response.statuses) {\n        moskitoStatus.applicationStatuses.push( response.statuses[appName] );\n      }\n\n      // Getting updater statuses\n      moskitoStatus.chartsUpdater = response.updaterStatuses.charts;\n      moskitoStatus.statusUpdater = response.updaterStatuses.status;\n\n      return moskitoStatus;\n    });\n  }\n\n  getMoskitoConfiguration(): Observable<any> {\n    return this.http.get(this.url + 'rest/configuration').map((resp: Response) => {\n      return resp.json();\n    });\n  }\n\n  getApplicationHistory(application: string): Observable<HistoryItem[]> {\n    return this.http.get(this.url + 'rest/history/' + application).map((resp: Response) => {\n      return resp.json().historyItems;\n    });\n  }\n\n  getApplicationCharts(application: string): Observable<Chart[]> {\n    return this.http.get(this.url + 'rest/charts/points/' + application).map((resp: Response) => {\n      return resp.json().charts;\n    });\n  }\n\n  getThresholds(application: string, component: string): Observable<Threshold[]> {\n    return this.http.get(this.url + 'rest/thresholds/' + application + '/' + component).map((resp: Response) => {\n      return resp.json().thresholds;\n    });\n  }\n\n  getAccumulatorNames(application: string, component: string): Observable<string[]> {\n    return this.http.get(this.url + 'rest/accumulators/' + application + '/' + component).map((resp: Response) => {\n      return resp.json().names;\n    });\n  }\n\n  getAccumulatorCharts(application: string, component: string, accumulators: string[]): Observable<Chart[]> {\n    let params = new AccumulatorChartParameters(application, component, accumulators);\n    return this.http.post(this.url + 'rest/accumulators/charts', params, { headers: this.json_header }).map((resp: Response) => {\n      return resp.json().charts;\n    });\n  }\n\n  getConnectorConfiguration(application: string, component: string): Observable<Connector> {\n    return this.http.get(this.url + 'rest/connectors/configuration/' + application + '/' + component).map((resp: Response) => {\n      return resp.json().connectorConfiguration;\n    });\n  }\n\n  getConnectorInformation(application: string, component: string): Observable<any> {\n    return this.http.get(this.url + 'rest/connectors/information/' + application + '/' + component).map((resp: Response) => {\n      return resp.json().connectorInformation;\n    });\n  }\n\n  getComponentHistory(application: string, component: string): Observable<HistoryItem[]> {\n    return this.http.get(this.url + `rest/history/${application}/${component}`).map((resp) => {\n      return resp.json().historyItems;\n    });\n  }\n\n  muteNotifications() {\n    this.http.get(this.url + 'rest/notifications/mute').subscribe();\n  }\n\n  unmuteNotifications() {\n    this.http.get(this.url + 'rest/notifications/unmute').subscribe();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/http.service.ts","import { Injectable } from \"@angular/core\";\nimport { MoskitoApplicationService } from \"./moskito-application.service\";\nimport { MoskitoComponentUtils } from \"../shared/moskito-component-utils\";\nimport { MoskitoCategory } from \"../entities/moskito-category\";\n\n\n/**\n * Manages {MoskitoComponent} categories. Used to retrieve possible\n * categories from components and stores currently applied category filter.\n *\n * @author strel\n */\n@Injectable()\nexport class CategoriesService {\n\n  /**\n   * Default category, indicating that component belongs to\n   * all possible categories.\n   */\n  public defaultCategory = new MoskitoCategory(\"All Categories\", true);\n\n  /**\n   * Moskito component category used as filter for\n   * components and history items.\n   */\n  private _filter: MoskitoCategory;\n\n\n  constructor(private moskitoApplicationService: MoskitoApplicationService) {\n    this._filter = JSON.parse(sessionStorage.getItem('category'));\n\n    if (!this._filter)\n      this._filter = this.defaultCategory;\n  }\n\n\n  /**\n   * Builds list of all possible categories from\n   * current application components.\n   *\n   * @returns {Array} current application categories\n   */\n  public getCategories(): MoskitoCategory[] {\n    // Getting list of current application components\n    let components = this.moskitoApplicationService.currentApplication.components;\n\n    let categoriesDictionary = {};\n\n    // Adding default category to dictionary\n    this.defaultCategory.status = MoskitoComponentUtils.getWorthComponentStatus(components);\n    this.defaultCategory.components = components;\n    categoriesDictionary[this.defaultCategory.name] = this.defaultCategory;\n\n    // Building categories for all components\n    for (let component of components) {\n      let category = categoriesDictionary[component.category];\n      if (!category) {\n        category = new MoskitoCategory();\n        category.name = component.category;\n        category.status = component.color;\n        category.active = this.filter.name === category.name;\n        category.all = false;\n        category.components = [];\n      }\n\n      // Changing category status to worth\n      category.status = MoskitoComponentUtils.getWorthStatus([component.color, category.status]);\n      category.components.push(component);\n\n      categoriesDictionary[component.category] = category;\n    }\n\n    // Moving categories from dictionary to array\n    let categories = [];\n    for (let categoryName in categoriesDictionary) {\n      categories.push(categoriesDictionary[categoryName]);\n    }\n\n    return categories;\n  }\n\n  public resetFilter() {\n    this._filter = this.defaultCategory;\n    sessionStorage.setItem('category', JSON.stringify(this.defaultCategory));\n  }\n\n  set filter(filter: MoskitoCategory) {\n    this._filter = filter;\n    sessionStorage.setItem('category', JSON.stringify(this._filter));\n  }\n\n  get filter(): MoskitoCategory {\n    if (!this._filter)\n      this._filter = JSON.parse(sessionStorage.getItem('category'));\n\n    return this._filter;\n  }\n\n  get filterString(): string {\n    if (!this._filter)\n      this._filter = JSON.parse(sessionStorage.getItem('category'));\n\n    return this._filter == this.defaultCategory ? \"\" : this._filter.name;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/categories.service.ts","import { Injectable, ElementRef } from \"@angular/core\";\nimport { Chart } from \"../entities/chart\";\n\n\ndeclare var chartEngineIniter: any;\n\n\ninterface ChartContent {\n  [name: string]: string;\n}\n\n@Injectable()\nexport class ChartService {\n\n  private initializedChartNames: string[];\n  private chartsCache: ChartContent;\n\n\n  constructor() {\n    this.initializedChartNames = [];\n    this.chartsCache = {};\n  }\n\n  public initializeChart(chart: Chart, container: any) {\n    let chartData = [];\n    for (let point of chart.points) {\n      let jsonWithTimestamp = [point.timestamp];\n      for (let value of point.values) {\n        // Checking is it really number\n        let linePoint = Number(value);\n        if (!isNaN(linePoint)) {\n          jsonWithTimestamp.push(linePoint);\n        }\n      }\n\n      chartData.push(jsonWithTimestamp);\n    }\n\n    let names = chart.lineNames.map(function (graphNames) {\n      return graphNames;\n    });\n\n    let domContainer = container.nativeElement ? container.nativeElement : container;\n\n    let chartParams = {\n      container: domContainer.id,\n      names: names,\n      data: chartData,\n      colors: [],\n      type: 'LineChart',\n      title: names,\n      dataType: 'datetime',\n      previous_chart_params: {},\n      options: {\n        legendsPerSlice: 5,\n        margin: {top: 20, right: 20, bottom: 20, left: 40}\n      }\n    };\n\n    chartParams.previous_chart_params = {\n      width: domContainer.clientWidth,\n      height: domContainer.clientHeight\n    };\n\n    // Creating chart\n    chartEngineIniter.init(chartParams);\n  }\n\n  public refreshChart(chart: Chart, container: ElementRef) {\n    let chartData = [];\n    for (let point of chart.points) {\n      let jsonWithTimestamp = [point.timestamp];\n      for (let value of point.values) {\n        // Checking is it really number\n        let linePoint = Number(value);\n        if (!isNaN(linePoint)) {\n          jsonWithTimestamp.push(linePoint);\n        }\n      }\n\n      chartData.push(jsonWithTimestamp);\n    }\n\n    let names = chart.lineNames.map(function (graphNames) {\n      return graphNames;\n    });\n\n    let containerSelector = '#' + container.nativeElement.id;\n\n    chartEngineIniter.d3charts.dispatch.refreshLineCharts({\n      \"containerId\": containerSelector,\n      \"data\": chartData,\n      \"names\": names\n    });\n  }\n\n  public getChartContent(chartName: string) {\n    return this.chartsCache[chartName];\n  }\n\n  public buildChartBoxID(chartName: string): string {\n    // If chart name is empty generate id\n    if (!chartName) {\n      return \"chart-\" + (Math.floor(Math.random() * 9999) + 1000);\n    }\n\n    return chartName.replace(/ /gi, \"_\");\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/chart.service.ts","import { Injectable } from \"@angular/core\";\n\n\n@Injectable()\nexport class StatusService {\n\n  private _filter: string[];\n\n\n  constructor() {\n    this._filter = JSON.parse(sessionStorage.getItem('status'));\n\n    if (!this._filter)\n      this._filter = [];\n  }\n\n\n  public resetFilter() {\n    this._filter = [];\n    sessionStorage.setItem('status', JSON.stringify([]));\n  }\n\n  set filter(filter: string[]) {\n    this._filter = filter;\n    sessionStorage.setItem('status', JSON.stringify(filter));\n  }\n\n  get filter(): string[] {\n    if (!this._filter)\n      this._filter = JSON.parse(sessionStorage.getItem('status'));\n\n    return this._filter;\n  }\n\n  public addFilter(color: string) {\n    if (this._filter.indexOf(color) === -1) {\n      this._filter.push(color);\n\n      // Make new copy of array and assign to same variable to trigger angular change detection\n      this._filter = this._filter.slice();\n\n      sessionStorage.setItem('status', JSON.stringify(this._filter));\n    }\n  }\n\n  public removeFilter(filterColor: string) {\n    this._filter = this._filter.filter((color: string) => {\n      return color !== filterColor;\n    });\n\n    sessionStorage.setItem('status', JSON.stringify(this._filter));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/status.service.ts","\n\nexport abstract class Widget {\n\n  name: string;\n  displayName: string;\n  className: string;\n  icon: string;\n  enabled: boolean;\n\n\n  abstract refresh();\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/widget.component.ts","import { Injectable } from \"@angular/core\";\nimport { TvWidget } from \"../widgets/tv-widget.component\";\nimport { MoskitoComponentsWidget } from \"../widgets/moskito-components-widget.component\";\nimport { ChartsWidget } from \"../widgets/charts-widget.component\";\nimport { HistoryWidget } from \"../widgets/history-widget.component\";\n\n\n@Injectable()\nexport class WidgetService {\n\n  private widgets = {\n    \"status\": {\n      name: \"status\",\n      component: \"MoskitoComponentsWidget\",\n      displayName: \"Status\",\n      className: \"statuses\",\n      icon: \"fa fa-adjust\",\n      enabled: false\n    },\n    \"tv\": {\n      name: \"tv\",\n      component: \"TvWidget\",\n      displayName: \"TV\",\n      className: \"tv\",\n      icon: \"fa fa-smile-o\",\n      enabled: false\n    },\n    \"charts\": {\n      name: \"charts\",\n      component: \"ChartsWidget\",\n      displayName: \"Charts\",\n      className: \"charts\",\n      icon: \"fa fa-bar-chart-o\",\n      enabled: true\n    },\n    \"history\": {\n      name: \"history\",\n      component: \"HistoryWidget\",\n      displayName: \"History\",\n      className: \"history\",\n      icon: \"fa fa-bars\",\n      enabled: true\n    },\n    \"statusBeta\": {\n      name: \"statusBeta\",\n      component: \"MoskitoBetaComponentsWidget\",\n      displayName: \"Status (beta)\",\n      className: \"statuses\",\n      icon: \"fa fa-adjust\",\n      enabled: true\n    }\n  };\n\n\n  constructor() { }\n\n  public isWidgetEnabled(widget: string): boolean {\n    return this.widgets[widget] && this.widgets[widget].enabled;\n  }\n\n  public setWidgetEnabled(widget: string, enabled: boolean) {\n    if (this.widgets[widget])\n      this.widgets[widget].enabled = enabled;\n  }\n\n  public toggleWidgetEnabled(widget: string) {\n    if (this.widgets[widget])\n      this.widgets[widget].enabled = !this.widgets[widget].enabled;\n  }\n\n  public getWidgets() {\n    return this.widgets;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/widget.service.ts","import {MoskitoComponent} from \"../entities/moskito-component\";\n\n\nenum Status {\n  NONE, PURPLE, RED, ORANGE, YELLOW, GREEN\n}\n\nexport class MoskitoComponentUtils {\n\n  static getWorthComponentStatus(components: MoskitoComponent[]): string {\n    let worthStatus = Status.GREEN;\n\n    for (let component of components) {\n      let componentStatus = Status[component.color];\n      if (componentStatus < worthStatus) {\n        worthStatus = componentStatus;\n      }\n    }\n\n    return Status[worthStatus];\n  }\n\n  static getWorthStatus(statuses: string[]): string {\n    let worthStatus = Status.GREEN;\n\n    for (let status of statuses) {\n      if (Status[status] < worthStatus) {\n        worthStatus = Status[status];\n      }\n    }\n\n    return Status[worthStatus];\n  }\n\n  static orderComponentsByCategories(components: MoskitoComponent[]): any {\n    let categories = {};\n\n    for (let component of components) {\n      if (!categories[component.category]) {\n        categories[component.category] = [];\n      }\n\n      categories[component.category].push(component);\n    }\n\n    return categories;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/moskito-component-utils.ts","import {Component, Input} from '@angular/core';\nimport {ITimer} from './itimer';\n\n\n@Component({\n  selector: 'timer',\n  templateUrl: 'timer.component.html'\n})\nexport class TimerComponent {\n\n  @Input()\n  public timeInSeconds: number;\n\n  @Input()\n  public callback: () => void;\n\n  public timer: ITimer;\n  public lastRefreshTimestamp: Date;\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.initTimer();\n  }\n\n  hasFinished() {\n    return this.timer.hasFinished;\n  }\n\n  initTimer() {\n    if(!this.timeInSeconds) {\n      this.timeInSeconds = 0;\n    }\n\n    this.timer = <ITimer>{\n      seconds: this.timeInSeconds,\n      runTimer: false,\n      hasStarted: false,\n      hasFinished: false,\n      secondsRemaining: this.timeInSeconds\n    };\n\n    this.lastRefreshTimestamp = new Date();\n  }\n\n  startTimer() {\n    this.timer.hasStarted = true;\n    this.timer.runTimer = true;\n    this.timerTick();\n  }\n\n  restartTimer() {\n    this.initTimer();\n    this.startTimer();\n  }\n\n  pauseTimer() {\n    this.timer.runTimer = false;\n  }\n\n  resumeTimer() {\n    this.startTimer();\n  }\n\n  timerTick() {\n    setTimeout(() => {\n      if (!this.timer.runTimer) { return; }\n      this.timer.secondsRemaining--;\n      if (this.timer.secondsRemaining > 0) {\n        this.timerTick();\n      }\n      else {\n        this.timer.hasFinished = true;\n        this.callback();\n        this.restartTimer();\n      }\n    }, 1000);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/timer/timer.component.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 103;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 103\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from \"@angular/core\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { SharedModule } from \"./shared/shared.module\";\nimport { NgModule } from \"@angular/core\";\nimport { AppComponent } from \"./app.component\";\nimport { ScanColumnNavigationComponent } from \"./scan-column-navigation/scan-column-navigation.component\";\nimport { ConnectComponent } from \"./scan-column-navigation/connect.component\";\nimport { ContentComponent } from \"./content/content.component\";\nimport { CategoriesComponent } from \"./scan-column-navigation/categories.component\";\nimport { WidgetsToggleComponent } from \"./scan-column-navigation/widgets-toggle.component\";\nimport { StatisticsComponent } from \"./scan-column-navigation/statistics.component\";\nimport { TvWidget } from \"./widgets/tv-widget.component\";\nimport { ChartsWidget } from \"./widgets/charts-widget.component\";\nimport { HistoryWidget } from \"./widgets/history-widget.component\";\nimport { MoskitoComponentsWidget } from \"./widgets/moskito-components-widget.component\";\nimport { SettingsComponent } from \"./settings/settings.component\";\nimport { WidgetService } from \"./services/widget.service\";\nimport { HttpService } from \"./services/http.service\";\nimport { MoskitoApplicationService } from \"./services/moskito-application.service\";\nimport { ChartService } from \"./services/chart.service\";\nimport { NotificationsConfigComponent } from \"./shared/notifications/notifications-config.component\";\nimport { KeysPipe } from \"./pipes/keys.pipe\";\nimport { MoskitoBetaComponentsWidget } from \"./widgets/moskito-beta-components-widget.component\";\nimport { CategoriesService } from \"./services/categories.service\";\nimport { StatusService } from \"./services/status.service\";\nimport { ComponentsCategoryFilterPipe } from \"./pipes/components-category-filter.pipe\";\nimport { HistoryCategoryFilterPipe } from \"./pipes/history-category-filter.pipe\";\nimport { ComponentsStatusFilterPipe } from \"./pipes/components-status-filter.pipe\";\nimport { HistoryStatusFilterPipe } from \"./pipes/history-status-filter.pipe\";\nimport { SanitizeHtmlPipe } from \"./pipes/sanitarize-html.pipe\";\nimport { HealthStatusService } from \"./services/health-status.service\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { HomeComponent } from \"./home/home.component\";\nimport { ComponentInspectionModalComponent } from \"./widgets/modal/component-inspection-modal.component\";\n\n\nconst appRoutes: Routes =[\n  {\n    path: 'beta',\n    component: HomeComponent\n  },\n  {\n    path: '',\n    redirectTo: '/beta',\n    pathMatch: 'full'\n  }\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    ScanColumnNavigationComponent,\n    ContentComponent,\n    CategoriesComponent,\n    WidgetsToggleComponent,\n    StatisticsComponent,\n    TvWidget,\n    ChartsWidget,\n    HistoryWidget,\n    MoskitoComponentsWidget,\n    SettingsComponent,\n    NotificationsConfigComponent,\n    ConnectComponent,\n    MoskitoBetaComponentsWidget,\n    ComponentInspectionModalComponent,\n\n    // Pipes\n    KeysPipe,\n    ComponentsCategoryFilterPipe,\n    ComponentsStatusFilterPipe,\n    HistoryCategoryFilterPipe,\n    HistoryStatusFilterPipe,\n    SanitizeHtmlPipe\n  ],\n  imports: [\n    SharedModule,\n\n    // Routes\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [\n    WidgetService,\n    HttpService,\n    HealthStatusService,\n    MoskitoApplicationService,\n    ChartService,\n    CategoriesService,\n    StatusService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpService } from \"../services/http.service\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { TimerComponent } from \"../shared/timer/timer.component\";\nimport { MoskitoApplication } from \"../entities/moskito-application\";\nimport { CategoriesService } from \"../services/categories.service\";\nimport { WidgetService } from \"../services/widget.service\";\n\n\n/**\n * Responsible for general view: component widgets, charts, tv widget, history items\n * and header rendering. Loads moskito applications list and initializes refresh timer component.\n *\n * @author strel\n */\n@Component({\n  selector: 'content',\n  templateUrl: './content.component.html'\n})\nexport class ContentComponent implements OnInit {\n\n  /**\n   * Switches configuration mode for Moskito Control, i.e.\n   * switches view between settings and widgets pages.\n   */\n  configToggle: boolean;\n\n  /**\n   * List of Moskito applications to be rendered.\n   */\n  applications: MoskitoApplication[];\n\n  /**\n   * Data loading guard. Indicates whether component\n   * has retrieved applications data from REST service.\n   */\n  applicationDataLoaded: boolean;\n\n  /**\n   * Reference to timer component.\n   */\n  @ViewChild('dataRefreshTimer')\n  timer: TimerComponent;\n\n\n  constructor(\n    public widgetService: WidgetService,\n    public moskitoApplicationService: MoskitoApplicationService,\n    private httpService: HttpService,\n    private categoriesService: CategoriesService\n  ) {\n    this.applicationDataLoaded = false;\n  }\n\n  public ngOnInit(): void {\n\n    // Getting list of all applications\n    this.httpService.getMoskitoApplications().subscribe((applications) => {\n      this.applications = applications;\n      this.moskitoApplicationService.currentApplication = applications[0];\n\n      this.applicationDataLoaded = true;\n    });\n\n    this.initTimer();\n  }\n\n  /**\n   * Handler is called by data refresh timer each 60 seconds.\n   * It refreshes all Moskito Control data without reload.\n   */\n  public onDataRefresh() {\n    this.moskitoApplicationService.refreshData();\n  }\n\n  /**\n   * Sets Moskito-Control configuration mode.\n   * @param mode configuration mode indicator\n   */\n  public setConfigurationMode(mode: boolean) {\n    this.configToggle = mode;\n\n    // Not\n    if (!mode)\n      this.initTimer();\n    else\n      this.timer.pauseTimer();\n  }\n\n  public setApplication(app: MoskitoApplication) {\n    this.categoriesService.resetFilter();\n    this.moskitoApplicationService.switchApplication(app);\n  }\n\n  private initTimer() {\n    setTimeout(() => {\n      this.timer.callback = this.onDataRefresh.bind(this);\n      this.timer.startTimer();\n    }, 1000);\n  }\n\n  keys(): Array<any> {\n    return Object.keys(this.applications);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/content/content.component.ts","import { MoskitoComponent } from \"./moskito-component\";\n\n/**\n * Contains one element in the history view widget.\n * A history event is a change in the component's health status.\n *\n * @author strel\n */\nexport class HistoryItem {\n\n  /**\n   * Name of the affected component\n   */\n  componentName: string;\n\n  /**\n   * Affected component\n   */\n  component: MoskitoComponent;\n\n  /**\n   * Status resource prior to the change\n   */\n  oldStatus: string;\n\n  /**\n   * Status resource after the change.\n   */\n  newStatus: string;\n\n  /**\n   * Change timestamp\n   */\n  timestamp: number;\n\n  /**\n   * Timestamp of the change as iso-8661 timestamp (human readable)\n   */\n  isoTimestamp: string;\n\n  /**\n   * Messages in old state\n   */\n  oldMessages: string[];\n\n  /**\n   * Messages in new state\n   */\n  newMessages: string[];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entities/history-item.ts","import { MoskitoComponent } from \"./moskito-component\";\n\n\n/**\n * Represents an application in the view.\n * @author strel\n */\nexport class MoskitoApplication {\n\n  /**\n   * Application name\n   */\n  name: string;\n\n  /**\n   * Application health status\n   */\n  applicationColor: string;\n\n  /**\n   * List of application components\n   */\n  components: MoskitoComponent[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entities/moskito-application.ts","import { MoskitoComponent } from \"./moskito-component\";\n\n\n/**\n * Represents a single category in the view menu.\n *\n * @author strel\n */\nexport class MoskitoCategory {\n\n  /**\n   * Name of the category\n   */\n  name: string;\n\n  /**\n   * Worst health status (between components)\n   */\n  status: string;\n\n  /**\n   * If true this category is actually selected and\n   * applied components filter by this category\n   */\n  active: boolean;\n\n  /**\n   * Components which belong to this category\n   */\n  components: MoskitoComponent[];\n\n\n  constructor();\n  constructor(name: string);\n  constructor(name: string, active: boolean);\n  constructor(name?: string, active?: boolean, status?:string) {\n    this.name = name;\n    this.active = active;\n    this.status = status;\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entities/moskito-category.ts","\n/**\n * Application component.\n *\n * @author strel\n */\nexport class MoskitoComponent {\n\n  /**\n   * Component name\n   */\n  name: string;\n\n  /**\n   * Component category\n   */\n  category: string;\n\n  /**\n   * Component health status\n   */\n  color: string;\n\n  /**\n   * Messages associated with given component\n   */\n  messages: string[];\n\n  /**\n   * Component last update timestamp\n   */\n  lastUpdateTimestamp: string;\n\n  /**\n   * Last update timestamp in iso-8661 format (human readable timestamp)\n   */\n  ISO8601Timestamp: string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entities/moskito-component.ts","\n/**\n * Possible moskito health statuses varying from none and very bad\n * to good or healthy.\n */\nenum HealthStatus {\n  NONE, PURPLE, RED, ORANGE, YELLOW, GREEN\n}\n\n/**\n * Represents health status statistics used in statistics view.\n * Stores number of components for each health status.\n */\nexport class StatusStatistics {\n\n  /**\n   * Health status\n   */\n  status: string;\n\n  /**\n   * Number of components for given status\n   */\n  numberOfComponents: number;\n\n  /**\n   * Whether current status filter is active\n   */\n  selected: boolean;\n\n  constructor(status: string, componentsCount: number, selected?: boolean) {\n    this.status = status;\n    this.numberOfComponents = componentsCount;\n    this.selected = selected || false;\n  }\n\n  /**\n   * Returns empty statistics, i.e. all possible statuses with no components in it.\n   *\n   * @returns {{PURPLE: number, RED: number, ORANGE: number, YELLOW: number, GREEN: number}}\n   */\n  static getDefaultStatistics() {\n    return {\n      PURPLE: 0,\n      RED: 0,\n      ORANGE: 0,\n      YELLOW: 0,\n      GREEN: 0\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entities/status-statistic.ts","import { MoskitoApplicationStatus } from \"./moskito-application-status\";\nimport { UpdaterStatus } from \"./updater-status\";\n\n\n/**\n * Shows general system configuration and status.\n * It includes:\n *\n * <ul>\n *     <li>Applications:\n *      <ul>\n *         <li>Components settings: name, category, connector type, location</li>\n *         <li>Charts data description: components and accumulators to be visualized, chart limit</li>\n *      </ul>\n *     </li>\n *     <li>Used connectors</li>\n *     <li>Status updater configuration</li>\n *     <li>Charts updater configuration</li>\n * </ul>\n *\n * @author strel\n */\nexport class SystemStatus {\n\n  /**\n   * Moskito application settings including\n   * configuration for components.\n   */\n  applicationStatuses: MoskitoApplicationStatus[];\n\n  /**\n   * Status updater configuration.\n   */\n  statusUpdater: UpdaterStatus;\n\n  /**\n   * Charts updater configuration.\n   */\n  chartsUpdater: UpdaterStatus;\n\n\n  constructor() {\n    this.applicationStatuses = [];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entities/system-status.ts","import { Component, OnInit } from \"@angular/core\";\nimport { HttpService } from \"../services/http.service\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\n\n\n@Component({\n  selector: 'home',\n  templateUrl: './home.component.html'\n})\nexport class HomeComponent implements OnInit {\n\n  applicationDataLoaded: boolean;\n\n\n  constructor(private moskitoApplicationService: MoskitoApplicationService, private httpService: HttpService) { }\n\n  public ngOnInit() {\n    // Getting list of all applications\n    this.httpService.getMoskitoApplications().subscribe((applications) => {\n      this.moskitoApplicationService.applications = applications;\n      this.moskitoApplicationService.currentApplication = applications[0];\n\n      this.applicationDataLoaded = true;\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/home.component.ts","import { PipeTransform, Pipe } from \"@angular/core\";\nimport { MoskitoComponent } from \"../entities/moskito-component\";\nimport { CategoriesService } from \"../services/categories.service\";\n\n\n/**\n * Components pipe used to filter components by\n * specified category. Filter is triggered by scan column\n * item toggles in Category section.\n *\n * @author strel\n */\n@Pipe({ name: 'componentsByCategoryFilter' })\nexport class ComponentsCategoryFilterPipe implements PipeTransform {\n\n  constructor(private _categoryService: CategoriesService) {\n\n  }\n\n  /**\n   * Filters list of {MoksitoComponent} by specified category.\n   * If category name is empty, filter is bypassed.\n   *\n   * @param components List of {MoskitoComponent} to filter\n   * @param category Component category name used as filter\n   * @returns List of filtered {MoskitoComponent}\n   */\n  transform(components: MoskitoComponent[], category?: string): MoskitoComponent[] {\n    if (!components) {\n      return [];\n    }\n\n    if (!category || this._categoryService.defaultCategory.name === category) {\n      return components;\n    }\n\n    let filteredComponents = [];\n\n    for (let component of components) {\n      if (component.category == category) {\n        filteredComponents.push(component);\n      }\n    }\n\n    return filteredComponents;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/components-category-filter.pipe.ts","import { PipeTransform, Pipe } from \"@angular/core\";\nimport { MoskitoComponent } from \"../entities/moskito-component\";\n\n\n/**\n * Components pipe used to filter components by\n * specified health status. Filter is triggered by scan column\n * item toggles in Statistics section.\n *\n * @author strel\n */\n@Pipe({ name: 'componentsByStatusFilter' })\nexport class ComponentsStatusFilterPipe implements PipeTransform {\n\n  /**\n   * Filters Moskito components by specified health status.\n   * If status name is empty, filter is bypassed.\n   *\n   * @param components List of Moskito components to filter\n   * @param statuses Health status used as filter\n   * @returns List of filtered Moskito components\n   */\n  transform(components: MoskitoComponent[], statuses?: string[]): MoskitoComponent[] {\n    if (!components) {\n      return [];\n    }\n\n    if (!statuses || statuses.length === 0) {\n      return components;\n    }\n\n    const filteredComponents = [];\n\n    for (const component of components) {\n      for (const selectedStatus of statuses) {\n        if (component.color === selectedStatus) {\n          filteredComponents.push(component);\n          break;\n        }\n      }\n    }\n\n    return filteredComponents;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/components-status-filter.pipe.ts","import { PipeTransform, Pipe } from \"@angular/core\";\nimport { HistoryItem } from \"../entities/history-item\";\nimport { CategoriesService } from \"../services/categories.service\";\n\n\n/**\n * History items pipe used to filter history items by\n * specified component category. Filter is triggered by scan column\n * item toggles in Category section.\n *\n * @author strel\n */\n@Pipe({ name: 'historyByCategoryFilter' })\nexport class HistoryCategoryFilterPipe implements PipeTransform {\n\n  constructor(private _categoryService: CategoriesService) {\n  }\n\n  /**\n   * Filters list of history items by specified component category.\n   * If category name is empty, filter is bypassed.\n   *\n   * @param historyItems List of history items to filter\n   * @param category Affected component category name used as filter\n   * @returns List of filtered history items\n   */\n  transform(historyItems: HistoryItem[], category?: string): HistoryItem[] {\n    if (!historyItems) {\n      return [];\n    }\n\n    if (!category || this._categoryService.defaultCategory.name === category) {\n      return historyItems;\n    }\n\n    let filteredHistoryItems = [];\n\n    for (let item of historyItems) {\n      if (item.component && item.component.category == category) {\n        filteredHistoryItems.push(item);\n      }\n    }\n\n    return filteredHistoryItems;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/history-category-filter.pipe.ts","import { PipeTransform, Pipe } from \"@angular/core\";\nimport { HistoryItem } from \"../entities/history-item\";\n\n\n/**\n * History items pipe used to filter history items by\n * specified health status. Filter is triggered by scan column\n * item toggles in Statistics section.\n *\n * @author strel\n */\n@Pipe({ name: 'historyByStatusFilter' })\nexport class HistoryStatusFilterPipe implements PipeTransform {\n\n  /**\n   * Filters history items by specified health status.\n   * If status name is empty, filter is bypassed.\n   *\n   * @param historyItems List of history items to filter\n   * @param status Health status used as filter\n   * @returns List of filtered history items\n   */\n  transform(historyItems: HistoryItem[], status?: string[]): HistoryItem[] {\n    if (!historyItems) {\n      return [];\n    }\n\n    if (!status || status.length === 0) {\n      return historyItems;\n    }\n\n    const filteredHistoryItems = [];\n\n    for (const item of historyItems) {\n      for (const selectedStatus of status) {\n        if (item.component && item.component.color === selectedStatus) {\n          filteredHistoryItems.push(item);\n        }\n      }\n    }\n\n    return filteredHistoryItems;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/history-status-filter.pipe.ts","import { PipeTransform, Pipe } from \"@angular/core\";\n\n\n/**\n * Presents object as array of key - value pairs.\n * Used mainly in ngFor directive to iterate over objects.\n *\n * @author strel\n */\n@Pipe({ name: 'keys' })\nexport class KeysPipe implements PipeTransform {\n  transform(value, args: string[]): any {\n    let keys = [];\n    for (let key in value) {\n      keys.push({ key: key, value: value[key] });\n    }\n    return keys;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/keys.pipe.ts","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\n\n\n/**\n * Sanitizes HTML layout and produces safe HTML for\n * further embedding in DOM.\n *\n * Used mainly in component inspection modal\n * to sanitize checkboxes for accumulators tab.\n *\n * @author strel\n */\n@Pipe({\n  name: 'sanitizeHtml'\n})\nexport class SanitizeHtmlPipe implements PipeTransform  {\n\n  constructor(private _sanitizer: DomSanitizer){}\n\n  transform(v: string) : SafeHtml {\n    return this._sanitizer.bypassSecurityTrustHtml(v);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/sanitarize-html.pipe.ts","import { Component, OnInit } from \"@angular/core\";\nimport { MoskitoCategory } from \"../entities/moskito-category\";\nimport { CategoriesService } from \"../services/categories.service\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\n\n\n@Component({\n  selector: 'categories',\n  templateUrl: 'categories.component.html'\n})\nexport class CategoriesComponent implements OnInit {\n\n  categories: MoskitoCategory[];\n\n\n  constructor(private moskitoApplicationService: MoskitoApplicationService, private categoriesService: CategoriesService) {\n  }\n\n\n  public ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => this.refresh());\n    this.refresh();\n  }\n\n  public refresh() {\n    this.categories = this.categoriesService.getCategories();\n  }\n\n  public setFilter(category: MoskitoCategory) {\n    this.categoriesService.filter = category;\n  }\n\n  clearFilter(event: Event) {\n    event.preventDefault();\n    this.categoriesService.resetFilter();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/scan-column-navigation/categories.component.ts","import { Component } from \"@angular/core\";\nimport { HttpService } from \"../services/http.service\";\n\n\n/**\n * @author strel\n */\n@Component({\n  selector: 'quick-connect',\n  templateUrl: 'connect.component.html',\n  styleUrls: ['connect.component.css']\n})\nexport class ConnectComponent {\n\n  host: string;\n  port: string;\n  path: string;\n\n\n  constructor(private httpService: HttpService) {\n\n  }\n\n  connectServer() {\n    this.httpService.changeServer( this.host + this.port + this.path );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/scan-column-navigation/connect.component.ts","import {Component, OnInit} from \"@angular/core\";\nimport {MoskitoApplicationService} from \"../services/moskito-application.service\";\n\n\n@Component({\n  selector: 'scan-column',\n  templateUrl: './scan-column-navigation.component.html'\n})\nexport class ScanColumnNavigationComponent implements OnInit {\n\n  version: string;\n  configToggle: boolean;\n\n\n  constructor(private moskitoApplicationService: MoskitoApplicationService) {\n  }\n\n\n  public ngOnInit(): void {\n    this.version = this.moskitoApplicationService.version;\n    this.configToggle = this.moskitoApplicationService.configToggle;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/scan-column-navigation/scan-column-navigation.component.ts","import { Component, OnInit } from \"@angular/core\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { StatusStatistics } from \"../entities/status-statistic\";\nimport { StatusService } from \"../services/status.service\";\n\n\n@Component({\n  selector: 'statistics',\n  templateUrl: 'statistics.component.html'\n})\nexport class StatisticsComponent implements OnInit {\n\n  statistics: StatusStatistics[];\n\n\n  constructor(private moskitoApplicationService: MoskitoApplicationService, private statusService: StatusService) { }\n\n  public ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => this.refresh());\n    this.refresh();\n  }\n\n  public refresh() {\n    this.statistics = [];\n\n    let statsDictionary = StatusStatistics.getDefaultStatistics();\n    for (let component of this.moskitoApplicationService.currentApplication.components) {\n      if (!statsDictionary[component.color]) {\n        statsDictionary[component.color] = 0;\n      }\n\n      statsDictionary[component.color] += 1;\n    }\n\n    const statusFilter = this.statusService.filter;\n\n    // Transfer status dictionary to array of statistics objects\n    for (let status in statsDictionary) {\n      this.statistics.push(new StatusStatistics(status, statsDictionary[status], statusFilter.indexOf(status) !== -1));\n    }\n  }\n\n  public addStatusFilter(status: StatusStatistics) {\n    this.statusService.addFilter(status.status);\n    status.selected = true;\n  }\n\n  public removeStatusFilter(status: StatusStatistics) {\n    this.statusService.removeFilter(status.status);\n    status.selected = false;\n  }\n\n  clearFilter(event: Event) {\n    event.preventDefault();\n    this.statusService.resetFilter();\n\n    // Clear selected for all stats\n    this.statistics.forEach((stat) => stat.selected = false);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/scan-column-navigation/statistics.component.ts","import { Component, OnInit } from \"@angular/core\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { Widget } from \"../widgets/widget.component\";\nimport { WidgetService } from \"../services/widget.service\";\n\n\n@Component({\n  selector: 'widgets-toggle',\n  templateUrl: 'widgets-toggle.component.html'\n})\nexport class WidgetsToggleComponent implements OnInit {\n\n  widgets: Widget[];\n\n\n  constructor(private widgetService: WidgetService, private moskitoApplicationService: MoskitoApplicationService) { }\n\n  ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => this.refresh());\n    this.refresh();\n  }\n\n  public refresh() {\n    this.widgets = [];\n    let widgetDictionary = this.widgetService.getWidgets();\n\n    for (let widgetName in widgetDictionary) {\n      this.widgets.push(widgetDictionary[widgetName]);\n    }\n  }\n\n  toggleWidget(widget: Widget) {\n    this.widgetService.toggleWidgetEnabled(widget.name);\n  }\n\n  isWidgetEnabled(widget: Widget): boolean {\n    return this.widgetService.isWidgetEnabled(widget.name);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/scan-column-navigation/widgets-toggle.component.ts","import { Injectable } from \"@angular/core\";\n\n\n/**\n * Service is responsible for managing health statuses / colors.\n */\n@Injectable()\nexport class HealthStatusService {\n\n  NONE = \"none\";\n  PURPLE = \"purple\";\n  RED = \"red\";\n  ORANGE = \"orange\";\n  YELLOW = \"yellow\";\n  GREEN = \"green\";\n\n  colors = [\n    this.NONE, this.PURPLE, this.RED,\n    this.ORANGE, this.YELLOW, this.GREEN\n  ];\n\n  /**\n   * Returns health status by specified name.\n   */\n  resolveColor(name: string): string {\n    for (let color of this.colors) {\n      if (color == name.toLowerCase())\n        return color;\n    }\n\n    return this.NONE;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/health-status.service.ts","import { Component, OnInit } from \"@angular/core\";\nimport { HttpService } from \"../services/http.service\";\n\n\n@Component({\n  selector: 'settings',\n  templateUrl: 'settings.component.html',\n  styleUrls: ['settings.component.css']\n})\nexport class SettingsComponent implements OnInit{\n\n  configuration: any;\n\n\n  constructor(private httpService: HttpService) {\n  }\n\n  ngOnInit(): void {\n    this.httpService.getMoskitoConfiguration().subscribe(( configuration ) => {\n      this.configuration = configuration;\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/settings/settings.component.ts","import { Component } from \"@angular/core\";\nimport { HttpService } from \"../../services/http.service\";\n\n\n@Component({\n  selector: 'notifications-config',\n  templateUrl: './notifications-config.component.html'\n})\nexport class NotificationsConfigComponent {\n\n  notificationsMuted: boolean;\n  notificationsMutingTime: number;\n  notificationsRemainingMutingTime: number;\n\n\n  constructor(private httpService: HttpService) {\n    this.notificationsMuted = false;\n    this.notificationsMutingTime = 60;\n    this.notificationsRemainingMutingTime = 0;\n  }\n\n\n  public muteNotifications() {\n    if (this.notificationsMuted) {\n      return;\n    }\n\n    this.notificationsMuted = true;\n    this.notificationsMutingTime = 60;\n    this.notificationsRemainingMutingTime = 60;\n\n    this.httpService.muteNotifications();\n\n    // Starting timer\n    this.timerTick();\n  }\n\n  public unmuteNotifications() {\n    this.notificationsMuted = false;\n    this.notificationsMutingTime = 60;\n    this.notificationsRemainingMutingTime = 0;\n\n    this.httpService.unmuteNotifications();\n  }\n\n  private timerTick() {\n    setTimeout(() => {\n      if (!this.notificationsMuted) { return; }\n\n      this.notificationsRemainingMutingTime--;\n      if (this.notificationsRemainingMutingTime > 0) {\n        this.timerTick();\n      }\n      else {\n        this.unmuteNotifications();\n      }\n    }, 60000);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/notifications/notifications-config.component.ts","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport {TimerComponent} from \"./timer/timer.component\";\n\n\n@NgModule({\n   declarations: [\n       TimerComponent\n   ],\n   imports: [\n       BrowserModule,\n       FormsModule,\n       ReactiveFormsModule,\n       HttpModule\n   ],\n   exports: [\n       // Shared Modules\n       BrowserModule,\n       FormsModule,\n       ReactiveFormsModule,\n       HttpModule,\n\n       // Shared Components\n       TimerComponent\n   ],\n   providers: [],\n})\nexport class SharedModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/shared.module.ts","import { Component, QueryList, ElementRef, ViewChildren, AfterViewInit, OnInit } from \"@angular/core\";\nimport { Widget } from \"./widget.component\";\nimport { Chart } from \"../entities/chart\";\nimport { HttpService } from \"../services/http.service\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { ChartService } from \"../services/chart.service\";\n\n\ndeclare var chartEngineIniter: any;\n\n\n@Component({\n  selector: 'charts-widget',\n  templateUrl: './charts-widget.component.html'\n})\nexport class ChartsWidget extends Widget implements AfterViewInit, OnInit {\n\n  charts: Chart[];\n  chartsDataLoaded: boolean;\n  chartBoxesInitialized: boolean;\n  fullscreenChart: Chart;\n\n  @ViewChildren('chart_box')\n  boxes: QueryList<ElementRef>;\n\n\n  constructor(private httpService: HttpService, private moskitoApplicationService: MoskitoApplicationService, private chartService: ChartService) {\n    super();\n\n    this.chartsDataLoaded = false;\n    this.chartBoxesInitialized = false;\n  }\n\n  ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => this.createBoxes());\n\n    // Loading charts\n    this.httpService.getApplicationCharts(this.moskitoApplicationService.currentApplication.name).subscribe((charts) => {\n      this.charts = charts;\n      this.chartsDataLoaded = true;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.boxes.changes.subscribe(( boxes ) => {\n      let boxesAsArray = boxes.toArray();\n      if (this.chartsDataLoaded) {\n        this.initializeCharts(this.charts, boxesAsArray);\n      }\n    });\n  }\n\n  public initializeCharts(charts: Chart[], chartBoxes: ElementRef[]) {\n    for (let i = 0; i < charts.length; i++) {\n      this.chartService.initializeChart(charts[i], chartBoxes[i]);\n    }\n  }\n\n  public refreshCharts(charts: Chart[], chartBoxes: ElementRef[]) {\n    for (let i = 0; i < charts.length; i++) {\n      this.chartService.refreshChart(charts[i], chartBoxes[i]);\n    }\n  }\n\n  onChartClick(event, chart) {\n    let target = event.currentTarget;\n\n    var body = document.querySelector('body');\n    var svg = target.querySelector('svg');\n\n    // Getting first non fullscreen box\n    let referenceElement;\n    for (let chartBox of this.boxes.toArray()) {\n      if (!chartBox.nativeElement.classList.contains('chart_fullscreen')) {\n        referenceElement = chartBox.nativeElement.querySelector('svg');\n        break;\n      }\n    }\n\n    body.classList.toggle('fullscreen');\n    target.classList.toggle('chart_fullscreen');\n    this.fullscreenChart = chart;\n\n    if (!target.classList.contains('chart_fullscreen')) {\n      svg.setAttribute(\"width\", referenceElement ? referenceElement.clientWidth : 800);\n      svg.setAttribute(\"height\", referenceElement ? referenceElement.clientHeight - 3 : 300);\n      this.fullscreenChart = null;\n    }\n\n    chartEngineIniter.d3charts.dispatch.refreshLineChart(\"#\" + target.id, true);\n  }\n\n  public createBoxes() {\n    this.httpService.getApplicationCharts(this.moskitoApplicationService.currentApplication.name).subscribe((charts) => {\n      this.charts = charts;\n    });\n  }\n\n  /**\n  *\n  */\n  public refresh() {\n    this.httpService.getApplicationCharts(this.moskitoApplicationService.currentApplication.name).subscribe((charts) => {\n      this.refreshCharts(charts, this.boxes.toArray());\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/charts-widget.component.ts","import { Component, OnInit } from \"@angular/core\";\nimport { HttpService } from \"../services/http.service\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { Widget } from \"./widget.component\";\nimport { HistoryItem } from \"../entities/history-item\";\nimport { CategoriesService } from \"../services/categories.service\";\nimport { StatusService } from \"../services/status.service\";\n\n\n@Component({\n  selector: 'history-widget',\n  templateUrl: './history-widget.component.html'\n})\nexport class HistoryWidget extends Widget implements OnInit {\n\n  historyItems: HistoryItem[];\n\n\n  constructor(private httpService: HttpService,\n              private moskitoApplicationService: MoskitoApplicationService,\n              public categoriesService: CategoriesService,\n              public statusService: StatusService) { super(); }\n\n  ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => this.refresh());\n\n    this.refresh();\n  }\n\n  public refresh() {\n    // Getting list of history items for given application\n    this.httpService.getApplicationHistory(this.moskitoApplicationService.currentApplication.name).subscribe((historyItems) => {\n      this.historyItems = [];\n\n      for (let historyItem of historyItems) {\n        let item = new HistoryItem();\n        item.component = this.moskitoApplicationService.getComponent(historyItem.componentName);\n        item.oldStatus = historyItem.oldStatus;\n        item.newStatus = historyItem.newStatus;\n        item.timestamp = historyItem.timestamp;\n        item.isoTimestamp = historyItem.isoTimestamp;\n        item.oldMessages = historyItem.oldMessages;\n        item.newMessages = historyItem.newMessages;\n\n        this.historyItems.push(item);\n      }\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/history-widget.component.ts","import { Component, Input, OnInit, AfterViewInit, ElementRef, ViewChildren, QueryList } from \"@angular/core\";\nimport { MoskitoApplication } from \"../../entities/moskito-application\";\nimport { MoskitoComponent } from \"../../entities/moskito-component\";\nimport { Threshold } from \"../../entities/threshold\";\nimport { Chart } from \"../../entities/chart\";\nimport { HttpService } from \"../../services/http.service\";\nimport { ChartService } from \"../../services/chart.service\";\n\n\n@Component({\n  selector: 'component-inspection-modal',\n  templateUrl: 'component-inspection-modal.component.html'\n})\nexport class ComponentInspectionModalComponent implements OnInit, AfterViewInit {\n\n  @Input()\n  application: MoskitoApplication;\n\n  @Input()\n  component: MoskitoComponent;\n\n  thresholds: Threshold[];\n  accumulatorNames: string[];\n  accumulatorCharts: Chart[];\n  checkedAccumulators: string[];\n\n  accumulatorChartsDataLoaded: boolean;\n\n  @ViewChildren('chart_box')\n  chartBoxes: QueryList<ElementRef>;\n\n\n  constructor(\n    private httpService: HttpService,\n    private chartService: ChartService\n  ) {\n  }\n\n  ngOnInit() {\n    // Getting list of thresholds\n    this.httpService.getThresholds( this.application.name, this.component.name ).subscribe(( thresholds ) => {\n      this.thresholds = thresholds;\n    });\n\n    // Getting list of accumulator names\n    this.httpService.getAccumulatorNames( this.application.name, this.component.name ).subscribe(( names ) => {\n      this.accumulatorNames = names;\n    });\n\n    this.accumulatorCharts = [];\n    this.checkedAccumulators = [];\n  }\n\n  ngAfterViewInit(): void {\n    this.chartBoxes.changes.subscribe(( boxes ) => {\n      if (this.accumulatorChartsDataLoaded) {\n        this.initializeCharts(this.accumulatorCharts, boxes.toArray());\n      }\n    });\n  }\n\n  public toggleAccumulatorChart( event, accumulatorName: string ) {\n    // Toggling accumulator charts\n    let showChart = event.target.checked;\n\n    if (showChart) {\n      // If checkbox is checked and there is no accumulator in list, add it\n      if (this.checkedAccumulators.indexOf(accumulatorName, 0) == -1) {\n        this.checkedAccumulators.push(accumulatorName);\n      }\n    }\n    else {\n      // Removing accumulator name from list if checkbox is unchecked\n      let index = this.checkedAccumulators.indexOf(accumulatorName, 0);\n      if (index > -1) {\n        this.checkedAccumulators.splice(index, 1);\n      }\n    }\n\n    this.httpService.getAccumulatorCharts( this.application.name, this.component.name, this.checkedAccumulators ).subscribe(( charts ) => {\n      this.accumulatorCharts = charts;\n      this.accumulatorChartsDataLoaded = true;\n    });\n  }\n\n  public initializeCharts(charts: Chart[], chartBoxes: ElementRef[]) {\n    if (!charts || !chartBoxes) {\n      return;\n    }\n\n    for (let i = 0; i < charts.length; i++) {\n      this.chartService.initializeChart(charts[i], chartBoxes[i]);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/modal/component-inspection-modal.component.ts","import { Component, OnInit, AfterViewInit, ElementRef, ViewChildren, QueryList } from \"@angular/core\";\nimport { Widget } from \"./widget.component\";\nimport { MoskitoComponent } from \"../entities/moskito-component\";\nimport { MoskitoComponentUtils } from \"../shared/moskito-component-utils\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { HttpService } from \"../services/http.service\";\nimport { CategoriesService } from \"../services/categories.service\";\nimport { StatusService } from \"../services/status.service\";\nimport { Threshold } from \"../entities/threshold\";\nimport { Chart } from \"../entities/chart\";\nimport { ChartService } from \"../services/chart.service\";\nimport { Connector } from \"../entities/connector\";\nimport { MoskitoApplication } from \"../entities/moskito-application\";\nimport { HistoryItem } from \"../entities/history-item\";\n\ndeclare var SetupComponentsView: any;\n\n\ninterface ComponentMap {\n  [component: string]: any;\n}\n\n@Component({\n  selector: 'beta-components-widget',\n  templateUrl: 'moskito-beta-components-widget.component.html'\n})\nexport class MoskitoBetaComponentsWidget extends Widget implements OnInit, AfterViewInit {\n\n  currentApplication: MoskitoApplication;\n\n  components: MoskitoComponent[];\n  categories: any;\n\n  componentUtils: MoskitoComponentUtils;\n\n  connector: Connector;\n  thresholds: Threshold[];\n  accumulatorNames: string[];\n  accumulatorCharts: Chart[];\n  history: HistoryItem[];\n\n  private checkedAccumulatorsMap: ComponentMap;\n  private accumulatorChartsMap: ComponentMap;\n  private accumulatorChartsDataLoaded: boolean;\n\n  @ViewChildren('chart_box')\n  chartBoxes: QueryList<ElementRef>;\n\n  @ViewChildren('componentInspectionModal')\n  inspectionModals: QueryList<ElementRef>;\n\n\n  constructor(\n    private httpService: HttpService,\n    private moskitoApplicationService: MoskitoApplicationService,\n    public categoriesService: CategoriesService,\n    public statusService: StatusService,\n    private chartService: ChartService\n  ) {\n    super();\n    this.componentUtils = MoskitoComponentUtils;\n    this.resetAccumulatorsData();\n  }\n\n  ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => {\n      this.refresh();\n      this.resetAccumulatorsData();\n    });\n\n    this.refresh();\n  }\n\n  ngAfterViewInit(): void {\n    this.chartBoxes.changes.subscribe(( boxes ) => {\n      if (this.accumulatorChartsDataLoaded) {\n        this.initializeCharts(this.accumulatorCharts);\n      }\n    });\n  }\n\n  getComponentInspectionModalData( componentName: string ) {\n     this.resetComponentInspectionData();\n\n    // Getting component's connector information\n    this.httpService.getConnectorConfiguration( this.currentApplication.name, componentName ).subscribe(\n      ( connector ) => {\n        this.connector = connector;\n\n        // Loading data for the first available tab\n        if (connector) {\n          if (connector.supportsThresholds) {\n            this.loadThresholdsData( componentName );\n          }\n          else if (connector.supportsAccumulators) {\n            this.loadAccumulatorsData( componentName );\n          }\n          else if (connector.supportsInfo) {\n            this.loadConnectorInformation( componentName );\n          }\n        }\n\n        this.loadComponentHistory( componentName );\n      },\n      ( error ) => {\n        console.error(\"Can't obtain connector for component %s: %s\", componentName, error);\n      }\n    );\n  }\n\n  public loadThresholdsData( componentName ) {\n    if (this.connector.supportsThresholds) {\n      this.httpService.getThresholds(this.currentApplication.name, componentName).subscribe((thresholds) => {\n        this.thresholds = thresholds;\n      });\n    }\n  }\n\n  public loadAccumulatorsData( componentName ) {\n    if (this.connector.supportsAccumulators) {\n      this.httpService.getAccumulatorNames(this.currentApplication.name, componentName).subscribe((names) => {\n        this.accumulatorNames = names;\n      });\n\n      // Getting checked accumulator charts\n      this.accumulatorCharts = this.accumulatorChartsMap[componentName];\n    }\n  }\n\n  public loadConnectorInformation( componentName ) {\n    if (this.connector.supportsInfo) {\n      this.httpService.getConnectorInformation(this.currentApplication.name, componentName).subscribe((connector) => {\n        this.connector.info = connector.info;\n      });\n    }\n  }\n\n  public loadComponentHistory( componentName ) {\n    this.httpService.getComponentHistory(this.currentApplication.name, componentName).subscribe((history: HistoryItem[]) => {\n      this.history = history;\n    });\n  }\n\n  public toggleAccumulatorChart( event, componentName: string, accumulatorName: string ) {\n    let currentApp = this.moskitoApplicationService.currentApplication;\n    if (!currentApp) {\n      return;\n    }\n\n    // Toggling accumulator charts\n    let showChart = event.target.checked;\n\n    // Initializing accumulator names array\n    if (!this.checkedAccumulatorsMap[componentName]) {\n      this.checkedAccumulatorsMap[componentName] = [];\n    }\n\n    if (showChart) {\n      // If checkbox is checked and there is no accumulator in list, add it\n      if (this.checkedAccumulatorsMap[componentName].indexOf(accumulatorName, 0) == -1) {\n        this.checkedAccumulatorsMap[componentName].push(accumulatorName);\n      }\n    }\n    else {\n      // Removing accumulator name from list if checkbox is unchecked\n      let index = this.checkedAccumulatorsMap[componentName].indexOf(accumulatorName, 0);\n      if (index > -1) {\n        this.checkedAccumulatorsMap[componentName].splice(index, 1);\n      }\n    }\n\n    this.httpService.getAccumulatorCharts( currentApp.name, componentName, this.checkedAccumulatorsMap[componentName] ).subscribe(( charts ) => {\n      this.accumulatorCharts = charts;\n      this.accumulatorChartsMap[componentName] = charts;\n\n      this.accumulatorChartsDataLoaded = true;\n    });\n\n    // Scroll top\n    this.inspectionModals.forEach((modal: ElementRef) => {\n      let modalContent = modal.nativeElement.querySelector('.modal-body');\n      if (modalContent) modalContent.scrollTop = 0;\n    });\n  }\n\n  public initializeCharts(charts: Chart[]) {\n    if (!charts) {\n      return;\n    }\n\n    for (let chart of charts) {\n      let chartBox = this.chartBoxes.find((element) => {\n        return element.nativeElement.id == chart.divId;\n      });\n\n      this.chartService.initializeChart(chart, chartBox);\n    }\n  }\n\n  public resetComponentInspectionData() {\n    this.connector = null;\n    this.thresholds = [];\n    this.accumulatorNames = [];\n    this.accumulatorCharts = [];\n  }\n\n  public resetAccumulatorsData() {\n    this.checkedAccumulatorsMap = {};\n    this.accumulatorChartsMap = {};\n    this.accumulatorChartsDataLoaded = false;\n  }\n\n  public refresh() {\n    this.currentApplication = this.moskitoApplicationService.currentApplication;\n    this.components = this.moskitoApplicationService.currentApplication.components;\n    this.categories = MoskitoComponentUtils.orderComponentsByCategories(this.components);\n\n    // Initialize drag-n-drop and tooltips for components\n    setTimeout(() => {\n      SetupComponentsView();\n    }, 1000);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/moskito-beta-components-widget.component.ts","import { Component, OnInit, AfterViewInit, ViewChildren, ElementRef, QueryList } from \"@angular/core\";\nimport { Widget } from \"./widget.component\";\nimport { MoskitoComponent } from \"../entities/moskito-component\";\nimport { MoskitoComponentUtils } from \"../shared/moskito-component-utils\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\nimport { HttpService } from \"../services/http.service\";\nimport { StatusService } from \"../services/status.service\";\nimport { CategoriesService } from \"../services/categories.service\";\nimport { MoskitoApplication } from \"../entities/moskito-application\";\nimport { ChartService } from \"../services/chart.service\";\nimport { Threshold } from \"../entities/threshold\";\nimport { Chart } from \"../entities/chart\";\nimport { Connector } from \"../entities/connector\";\nimport { HistoryItem } from \"../entities/history-item\";\n\ndeclare var SetupComponentsView: any;\n\n\nclass ComponentInspectionModalData {\n  show: boolean;\n  application: MoskitoApplication;\n  component: MoskitoComponent;\n}\n\ninterface ComponentMap {\n  [component: string]: any;\n}\n\n@Component({\n  selector: 'components-widget',\n  templateUrl: 'moskito-components-widget.component.html'\n})\nexport class MoskitoComponentsWidget extends Widget implements OnInit, AfterViewInit {\n\n  currentApplication: MoskitoApplication;\n  components: MoskitoComponent[];\n  categories: any;\n\n  componentUtils: MoskitoComponentUtils;\n\n  connector: Connector;\n  thresholds: Threshold[];\n  accumulatorNames: string[];\n  accumulatorCharts: Chart[];\n  history: HistoryItem[];\n\n  private checkedAccumulatorsMap: ComponentMap;\n  private accumulatorChartsMap: ComponentMap;\n  private accumulatorChartsDataLoaded: boolean;\n\n  @ViewChildren('chart_box')\n  chartBoxes: QueryList<ElementRef>;\n\n  @ViewChildren('componentInspectionModal')\n  inspectionModals: QueryList<ElementRef>;\n\n\n  constructor(\n    private httpService: HttpService,\n    private moskitoApplicationService: MoskitoApplicationService,\n    private categoriesService: CategoriesService,\n    private statusService: StatusService,\n    private chartService: ChartService\n  ) {\n    super();\n    this.componentUtils = MoskitoComponentUtils;\n    this.resetComponentInspectionData();\n  }\n\n\n  ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => {\n      this.refresh();\n      this.resetComponentInspectionData();\n    });\n\n    this.refresh();\n  }\n\n  ngAfterViewInit(): void {\n    this.chartBoxes.changes.subscribe(( boxes ) => {\n      if (this.accumulatorChartsDataLoaded) {\n        this.initializeCharts(this.accumulatorCharts);\n      }\n    });\n  }\n\n  getComponentInspectionModalData( componentName: string ) {\n    // Getting component's connector information\n    this.httpService.getConnectorConfiguration( this.currentApplication.name, componentName ).subscribe(( connector ) => {\n      this.connector = connector;\n\n      // Loading data for the first available tab\n      if (connector) {\n        if (connector.supportsThresholds) {\n          this.loadThresholdsData( componentName );\n        }\n        else if (connector.supportsAccumulators) {\n          this.loadAccumulatorsData( componentName );\n        }\n        else if (connector.supportsInfo) {\n          this.loadConnectorInformation( componentName );\n        }\n      }\n\n      this.loadComponentHistory( componentName );\n    });\n  }\n\n  public loadThresholdsData( componentName ) {\n    if (this.connector.supportsThresholds) {\n      this.httpService.getThresholds(this.currentApplication.name, componentName).subscribe((thresholds) => {\n        this.thresholds = thresholds;\n      });\n    }\n  }\n\n  public loadAccumulatorsData( componentName ) {\n    if (this.connector.supportsAccumulators) {\n      this.httpService.getAccumulatorNames(this.currentApplication.name, componentName).subscribe((names) => {\n        this.accumulatorNames = names;\n      });\n\n      // Getting checked accumulator charts\n      this.accumulatorCharts = this.accumulatorChartsMap[componentName];\n    }\n  }\n\n  public loadConnectorInformation( componentName ) {\n    if (this.connector.supportsInfo) {\n      this.httpService.getConnectorInformation(this.currentApplication.name, componentName).subscribe((connector) => {\n        this.connector.info = connector.info;\n      });\n    }\n  }\n\n  public toggleAccumulatorChart( event, componentName: string, accumulatorName: string ) {\n    let currentApp = this.moskitoApplicationService.currentApplication;\n    if (!currentApp) {\n      return;\n    }\n\n    // Toggling accumulator charts\n    let showChart = event.target.checked;\n\n    // Initializing accumulator names array\n    if (!this.checkedAccumulatorsMap[componentName]) {\n      this.checkedAccumulatorsMap[componentName] = [];\n    }\n\n    if (showChart) {\n      // If checkbox is checked and there is no accumulator in list, add it\n      if (this.checkedAccumulatorsMap[componentName].indexOf(accumulatorName, 0) == -1) {\n        this.checkedAccumulatorsMap[componentName].push(accumulatorName);\n      }\n    }\n    else {\n      // Removing accumulator name from list if checkbox is unchecked\n      let index = this.checkedAccumulatorsMap[componentName].indexOf(accumulatorName, 0);\n      if (index > -1) {\n        this.checkedAccumulatorsMap[componentName].splice(index, 1);\n      }\n    }\n\n    this.httpService.getAccumulatorCharts( currentApp.name, componentName, this.checkedAccumulatorsMap[componentName] ).subscribe(( charts ) => {\n      this.accumulatorCharts = charts;\n      this.accumulatorChartsMap[componentName] = charts;\n\n      this.accumulatorChartsDataLoaded = true;\n    });\n\n    // Scroll top\n    this.inspectionModals.forEach((modal: ElementRef) => {\n      let modalContent = modal.nativeElement.querySelector('.modal-body');\n      if (modalContent) modalContent.scrollTop = 0;\n    });\n  }\n\n  public loadComponentHistory( componentName ) {\n    this.httpService.getComponentHistory(this.currentApplication.name, componentName).subscribe((history: HistoryItem[]) => {\n      this.history = history;\n    });\n  }\n\n  public initializeCharts(charts: Chart[]) {\n    if (!charts) {\n      return;\n    }\n\n    for (let chart of charts) {\n      let chartBox = this.chartBoxes.find((element) => {\n        return element.nativeElement.id == chart.divId;\n      });\n\n      this.chartService.initializeChart(chart, chartBox);\n    }\n  }\n\n  public resetComponentInspectionData() {\n    this.checkedAccumulatorsMap = {};\n    this.accumulatorChartsMap = {};\n    this.accumulatorChartsDataLoaded = false;\n  }\n\n  public refresh() {\n    this.currentApplication = this.moskitoApplicationService.currentApplication;\n    this.components = this.moskitoApplicationService.currentApplication.components;\n    this.categories = MoskitoComponentUtils.orderComponentsByCategories(this.components);\n\n    // Initialize drag-n-drop and tooltips for components\n    setTimeout(() => {\n      SetupComponentsView();\n    }, 1000);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/moskito-components-widget.component.ts","import { Component } from \"@angular/core\";\nimport { Widget } from \"./widget.component\";\nimport { MoskitoApplicationService } from \"../services/moskito-application.service\";\n\n\n@Component({\n  selector: 'tv-widget',\n  templateUrl: 'tv-widget.component.html'\n})\nexport class TvWidget extends Widget {\n\n  status: string;\n\n\n  constructor(private moskitoApplicationService: MoskitoApplicationService) {\n    super();\n  }\n\n  ngOnInit() {\n    this.moskitoApplicationService.dataRefreshEvent.subscribe(() => this.refresh());\n    this.moskitoApplicationService.applicationChangedEvent.subscribe(() => this.refresh());\n    this.refresh();\n  }\n\n  public refresh() {\n    this.status = this.moskitoApplicationService.currentApplication.applicationColor;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/widgets/tv-widget.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 214\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.form-box {\\n  padding: 5px 10px 0;\\n}\\n\\n.form-group {\\n  margin-bottom: 5px;\\n}\\n\\n.form-control {\\n  background: #3c3f49;\\n  border: none;\\n  box-shadow: none;\\n  color: #AFB0B2;\\n  border-radius: 5px;\\n}\\n\\n.btn {\\n  background-color: #85bd0a;\\n  display: block;\\n  width: 100%;\\n}\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/scan-column-navigation/connect.component.css\n// module id = 215\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\nh1, h2, h3, h4, h5, h6 {\\n  margin: 10px 0;\\n  font-family: inherit;\\n  font-weight: bold;\\n  line-height: 20px;\\n  color: inherit;\\n  text-rendering: optimizelegibility;\\n}\\n\\nli {\\n  line-height: 20px;\\n}\\n\\nul, ol {\\n  padding: 0;\\n  margin: 10px 0 10px 25px;\\n}\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/settings/settings.component.css\n// module id = 216\n// module chunks = 1","module.exports = \"\\n<router-outlet></router-outlet>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 230\n// module chunks = 1","module.exports = \"<div class=\\\"content\\\">\\n  <div *ngIf=\\\"configToggle\\\">\\n    <div class=\\\"infobar\\\">\\n      <div class=\\\"infoline\\\">\\n        <div class=\\\"pull-left\\\">\\n          <span class=\\\"configuration\\\">Settings</span>\\n        </div>\\n        <div class=\\\"pull-right\\\">\\n          <a  class=\\\"btn2\\\" (click)=\\\"setConfigurationMode(false)\\\"><span class=\\\"inbtn\\\">Back</span></a>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <settings></settings>\\n  </div>\\n\\n  <div *ngIf=\\\"!configToggle\\\">\\n    <div class=\\\"header\\\">\\n      <ul class=\\\"applications-list\\\">\\n        <li *ngFor=\\\"let app of applications\\\" [class]=\\\"app.applicationColor | lowercase\\\" [class.active]=\\\"moskitoApplicationService.currentApplication == app\\\">\\n          <a  (click)=\\\"setApplication(app)\\\">\\n            {{ app.name }}\\n            <span class=\\\"status\\\"></span>\\n          </a>\\n        </li>\\n      </ul>\\n\\n      <div class=\\\"pull-right\\\">\\n        <a class=\\\"design-toggle\\\" href=\\\"{{ moskitoApplicationService.getApplicationContextPath() + 'control/main' }}\\\">\\n          Regular\\n        </a>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"infobar\\\">\\n      <div class=\\\"infoline\\\">\\n        <div class=\\\"pull-left\\\">\\n          <timer #dataRefreshTimer timeInSeconds=\\\"60\\\" [callback]=\\\"onDataRefresh\\\"></timer>\\n        </div>\\n        <div class=\\\"pull-right\\\">\\n          <notifications-config></notifications-config>\\n\\n          <span class=\\\"vline\\\"></span>\\n          <a  class=\\\"btn2 settings\\\">\\n            <span class=\\\"inbtn\\\" (click)=\\\"setConfigurationMode(true)\\\"><i class=\\\"fa fa-cog\\\"></i>Settings</span>\\n          </a>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"box-list\\\" *ngIf=\\\"applicationDataLoaded\\\">\\n      <tv-widget #tvWidget *ngIf=\\\"widgetService.isWidgetEnabled('tv')\\\"></tv-widget>\\n      <components-widget #componentsWidget *ngIf=\\\"widgetService.isWidgetEnabled('status')\\\"></components-widget>\\n      <beta-components-widget #betaComponentsWidget *ngIf=\\\"widgetService.isWidgetEnabled('statusBeta')\\\"></beta-components-widget>\\n      <charts-widget #chartsWidget *ngIf=\\\"widgetService.isWidgetEnabled('charts')\\\"></charts-widget>\\n      <history-widget #historyWidget *ngIf=\\\"widgetService.isWidgetEnabled('history')\\\"></history-widget>\\n    </div>\\n  </div>\\n</div>\\n\\n<img src=\\\"//counter.moskito.org/counter/control/{{ moskitoApplicationService.version }}/main\\\" class=\\\"ipix\\\">\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/content/content.component.html\n// module id = 231\n// module chunks = 1","module.exports = \"<div *ngIf=\\\"applicationDataLoaded\\\" class=\\\"wrapper\\\">\\n  <scan-column></scan-column>\\n  <content></content>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = 232\n// module chunks = 1","module.exports = \"\\n\\n<div class=\\\"block\\\">\\n  <h3 class=\\\"block-title\\\">\\n    Category<a class=\\\"pull-right clear-filter-toggle\\\" (click)=\\\"clearFilter($event)\\\" href=\\\"#\\\">clear</a>\\n  </h3>\\n  <ul class=\\\"category-list\\\">\\n    <li *ngFor='let category of categories' (click)=\\\"setFilter(category)\\\" [class]='category.status | lowercase' [class.active]='category.name == categoriesService.filter?.name'>\\n      <a>\\n        <i class=\\\"fa fa-folder\\\"></i>\\n        {{ category.name }}&nbsp;({{ category.components.length }})\\n        <span class=\\\"status\\\"></span>\\n      </a>\\n    </li>\\n  </ul>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/scan-column-navigation/categories.component.html\n// module id = 233\n// module chunks = 1","module.exports = \"\\n<div class=\\\"block\\\">\\n  <h3 class=\\\"block-title\\\">Connect</h3>\\n  <div class=\\\"form-box\\\">\\n    <form name=\\\"QuickConnect\\\" novalidate=\\\"\\\" class=\\\"ng-untouched ng-pristine ng-valid\\\">\\n      <div class=\\\"form-group\\\">\\n        <input class=\\\"form-control\\\" [(ngModel)]=\\\"host\\\" name=\\\"pServerName\\\" placeholder=\\\"Host\\\" type=\\\"text\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <input class=\\\"form-control\\\" [(ngModel)]=\\\"port\\\" name=\\\"pServerPort\\\" placeholder=\\\"Port\\\" type=\\\"text\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <input class=\\\"form-control\\\" [(ngModel)]=\\\"path\\\" name=\\\"pServerPath\\\" placeholder=\\\"Path\\\" type=\\\"text\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button class=\\\"btn btn-success\\\" (click)=\\\"connectServer()\\\" type=\\\"button\\\">Connect</button>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/scan-column-navigation/connect.component.html\n// module id = 234\n// module chunks = 1","module.exports = \"\\n\\n<div class=\\\"left-bar\\\">\\n    <a  class=\\\"logo\\\">\\n        <img src=\\\"./assets/img/logo.png\\\" alt=\\\"MoSKito Control\\\" border=\\\"0\\\"/>\\n        <span class=\\\"version\\\">{{ version }}</span>\\n    </a>\\n\\n    <div *ngIf = \\\"!configToggle\\\">\\n        <categories></categories>\\n        <widgets-toggle></widgets-toggle>\\n        <statistics></statistics>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/scan-column-navigation/scan-column-navigation.component.html\n// module id = 235\n// module chunks = 1","module.exports = \"\\n\\n<div class=\\\"block\\\">\\n  <h3 class=\\\"block-title\\\">\\n    Statistics<a class=\\\"pull-right clear-filter-toggle\\\" (click)=\\\"clearFilter($event)\\\" href=\\\"#\\\">clear</a>\\n  </h3>\\n  <ul class=\\\"statistics-list\\\">\\n    <li *ngFor=\\\"let stat of statistics\\\" [class]=\\\"stat.status | lowercase\\\" [class.active]=\\\"stat.selected\\\"\\n        (click)=\\\"stat.selected ? removeStatusFilter(stat) : addStatusFilter(stat)\\\">\\n      <a >{{ stat.numberOfComponents }} <span class=\\\"status\\\"></span></a>\\n    </li>\\n  </ul>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/scan-column-navigation/statistics.component.html\n// module id = 236\n// module chunks = 1","module.exports = \"\\n\\n<div class=\\\"block\\\">\\n  <h3 class=\\\"block-title\\\">Widgets</h3>\\n  <ul class=\\\"widgets-list\\\">\\n    <li *ngFor=\\\"let widget of widgets\\\" [class]=\\\"widget.className\\\" [class.active]=\\\"isWidgetEnabled( widget )\\\">\\n      <a  (click)=\\\"toggleWidget( widget )\\\">\\n        <i class=\\\"{{ widget.icon }}\\\"></i>{{ widget.displayName }}\\n      </a>\\n    </li>\\n  </ul>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/scan-column-navigation/widgets-toggle.component.html\n// module id = 237\n// module chunks = 1","module.exports = \"\\n  <ul *ngIf=\\\"configuration\\\">\\n    <li>Notifications muting time: 60 minutes</li>\\n    <li>History items amount: 100</li>\\n\\n    <div *ngIf=\\\"configuration.applications\\\">\\n      <li><h5>Applications</h5></li>\\n      <ul *ngFor=\\\"let app of configuration.applications\\\">\\n        <li><h6>Name: {{ app.name }}</h6></li>\\n        <li><h6>Components</h6></li>\\n        <ul *ngFor=\\\"let component of app.components\\\">\\n          <li>Name: {{ component.name }}</li>\\n          <li>Category: {{ component.category }}</li>\\n          <li>Connector type: {{ component.connectorType }}</li>\\n          <li>Location: {{ component.location }}</li>\\n        </ul>\\n        <br/>\\n\\n        <div *ngIf=\\\"app.charts\\\">\\n          <li><h6>Charts</h6></li>\\n          <ul *ngFor=\\\"let chart of app.charts\\\">\\n            <li>Name: {{ chart.name }}</li>\\n            <li>Limit: {{ chart.limit }}</li>\\n            <ul *ngFor=\\\"let line of chart.lines\\\">\\n              <li>Component: {{ line.component }}</li>\\n              <li>Accumulator: {{ line.accumulator }}</li>\\n            </ul>\\n            <br/>\\n          </ul>\\n          <br/>\\n        </div>\\n      </ul>\\n    </div>\\n\\n    <li><h5>Connectors</h5></li>\\n    <ul *ngFor=\\\"let connector of configuration.connectors\\\">\\n      <li>Type: {{ connector.type }}</li>\\n      <li>Class name: {{ connector.className }}</li>\\n    </ul>\\n\\n    <br/>\\n    <li><h5>Status updater</h5></li>\\n    <ul>\\n      <li>Check period in seconds: {{ configuration.statusUpdater.checkPeriodInSeconds }}</li>\\n      <li>Thread pool size: {{ configuration.statusUpdater.threadPoolSize }}</li>\\n      <li>Timeout in seconds: {{ configuration.statusUpdater.timeoutInSeconds }}</li>\\n      <li>Enabled: {{ configuration.statusUpdater.enabled }}</li>\\n    </ul>\\n    <br/>\\n    <li><h5>Charts updater</h5></li>\\n    <ul>\\n      <li>Check period in seconds: {{ configuration.chartsUpdater.checkPeriodInSeconds }}</li>\\n      <li>Thread pool size: {{ configuration.chartsUpdater.threadPoolSize }}</li>\\n      <li>Timeout in seconds: {{ configuration.chartsUpdater.timeoutInSeconds }}</li>\\n      <li>Enabled: {{ configuration.chartsUpdater.enabled }}</li>\\n    </ul>\\n  </ul>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/settings/settings.component.html\n// module id = 238\n// module chunks = 1","module.exports = \"\\n<span *ngIf=\\\"!notificationsMuted\\\" class=\\\"mute-title\\\">Mute for {{ notificationsMutingTime }} minutes</span>\\n<span *ngIf=\\\"notificationsMuted\\\" class=\\\"mute-title\\\">Remaining muting time {{ notificationsRemainingMutingTime }} minutes</span>\\n\\n<a *ngIf=\\\"!notificationsMuted\\\" id=\\\"mute\\\"  class=\\\"btn2\\\" title=\\\"Mute mail notifications\\\" (click)=\\\"muteNotifications()\\\">\\n  <span class=\\\"inbtn\\\">Mute</span>\\n</a>\\n<a *ngIf=\\\"notificationsMuted\\\" id=\\\"unmute\\\"  class=\\\"btn2\\\" title=\\\"Unmute mail notifications\\\" (click)=\\\"unmuteNotifications()\\\">\\n  <span class=\\\"inbtn\\\">Unmute</span>\\n</a>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/shared/notifications/notifications-config.component.html\n// module id = 239\n// module chunks = 1","module.exports = \"\\n<div class=\\\"timer\\\" (click)=\\\"callback()\\\">\\n  <span class=\\\"last-refresh\\\"><i class=\\\"fa fa-clock-o\\\"></i>Last refresh: {{ lastRefreshTimestamp | date: 'yyyy-MM-ddTHH:mm:ss' }}</span>\\n  <span *ngIf=\\\"timeInSeconds && timeInSeconds > 0\\\" class=\\\"next-refresh\\\"><i class=\\\"fa fa-clock-o\\\"></i>Next refresh in <span id=\\\"remains\\\">{{ timer.secondsRemaining }}</span> seconds</span>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/shared/timer/timer.component.html\n// module id = 240\n// module chunks = 1","module.exports = \"\\n\\n<div class=\\\"box charts\\\">\\n  <div class=\\\"content-title\\\"><h3><i class=\\\"fa fa-bar-chart-o\\\"></i>Charts</h3></div>\\n  <div class=\\\"chart-list\\\">\\n    <div class=\\\"row\\\">\\n      <div *ngFor=\\\"let chart of charts\\\" class=\\\"col-md-6\\\">\\n        <div class=\\\"chart-item\\\">\\n          <div class=\\\"chart-box-name\\\">{{ chart.name }}</div>\\n          <div [id]=\\\"chartService.buildChartBoxID(chart.name)\\\" class=\\\"chart-box\\\" [class.chart_fullscreen]=\\\"chart.name == fullscreenChart?.name\\\" #chart_box (click)=\\\"onChartClick($event, chart)\\\"></div>\\n          <i class='fa fa-compress'></i>\\n          <i class='fa fa-expand'></i>\\n          <span class=\\\"footitle one-line-text\\\">{{ chart.legend }}</span>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/widgets/charts-widget.component.html\n// module id = 241\n// module chunks = 1","module.exports = \"\\n\\n<div class=\\\"box history\\\">\\n  <div class=\\\"content-title \\\"><h3><i class=\\\"fa fa-reorder\\\"></i>History</h3></div>\\n  <div class=\\\"history-box\\\">\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n      <tr>\\n        <th width=\\\"250\\\">Timestamp</th>\\n        <th>Name</th>\\n        <th width=\\\"200\\\">Status change</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr *ngFor=\\\"let item of historyItems | historyByCategoryFilter: categoriesService.filterString | historyByStatusFilter: statusService.filter\\\">\\n        <td>{{ item.isoTimestamp }}</td>\\n        <td>{{ item.component?.name }}</td>\\n        <td>\\n          <span class=\\\"status {{ item.oldStatus | lowercase }}\\\"></span>\\n          <span class=\\\"arrow-right\\\"></span>\\n          <span class=\\\"status {{ item.newStatus | lowercase }}\\\"></span>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/widgets/history-widget.component.html\n// module id = 242\n// module chunks = 1","module.exports = \"\\n<!-- Modal for component inspection -->\\n<div class=\\\"modal modal-stretch\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\">\\n  <div class=\\\"modal-dialog components-inspection-modal\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header custom-modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close custom-close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\">&times;</button>\\n        <h3><span class=\\\"status {{ component.color | lowercase }}\\\"></span>{{ component.name }}</h3>\\n\\n        <!-- Thresholds & Accumulators tabs -->\\n        <ul class=\\\"nav nav-tabs tabs-pane\\\">\\n          <li class=\\\"active\\\">\\n            <a href=\\\"#thresholds-tab\\\" data-toggle=\\\"tab\\\">\\n              Thresholds\\n            </a>\\n          </li>\\n          <li>\\n            <a href=\\\"#accumulators-tab\\\" data-toggle=\\\"tab\\\">\\n              Accumulators\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n\\n      <!-- Thresholds & Accumulators tabs -->\\n      <div class=\\\"modal-body custom-modal-body\\\">\\n        <!-- Thresholds & Accumulators tabs content -->\\n        <div class=\\\"tab-content\\\">\\n          <div class=\\\"tab-pane active\\\" id=\\\"thresholds-tab\\\">\\n            <div class=\\\"loading\\\" style=\\\"display: none\\\">\\n              <span class=\\\"spinner\\\"></span>\\n            </div>\\n            <div id=\\\"thresholds-view\\\">\\n              <!-- Thresholds -->\\n              <div *ngIf=\\\"thresholds\\\" class=\\\"thresholds\\\">\\n                <table class=\\\"table table-striped table-modal\\\">\\n                  <thead>\\n                  <tr>\\n                    <th>Threshold name</th>\\n                    <th width=\\\"50\\\">Status</th>\\n                    <th width=\\\"90\\\">Last value</th>\\n                    <th width=\\\"200\\\">Last change timestamp</th>\\n                  </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let threshold of thresholds\\\">\\n                      <td>{{ threshold.name }}</td>\\n                      <td><div class=\\\"{{ threshold.status }} status\\\"></div></td>\\n                      <td>{{ threshold.lastValue }}</td>\\n                      <td>{{ threshold.statusChangeTimestamp }}</td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n              </div>\\n\\n              <!-- No data message -->\\n              <div *ngIf=\\\"!thresholds\\\" class=\\\"response-message\\\">\\n                <p>Data is not available for this application component</p>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"tab-pane\\\" id=\\\"accumulators-tab\\\">\\n            <div class=\\\"loading\\\" style=\\\"display: none\\\">\\n              <span class=\\\"spinner\\\"></span>\\n            </div>\\n            <div id=\\\"accumulators-view\\\">\\n              <!-- Accumulator charts -->\\n              <div *ngIf=\\\"accumulatorCharts\\\" class=\\\"accumulators-charts\\\">\\n                <div *ngFor=\\\"let chart of accumulatorCharts\\\" class=\\\"chart-item chart-item-modal\\\">\\n                  <div class=\\\"chart-box-name\\\">{{ chart.name }}</div>\\n                  <div id=\\\"{{ chart.divId }}\\\" class=\\\"chart-box\\\" #chart_box style=\\\"width: 800px; height: 300px;\\\"></div>\\n                  <span class=\\\"footitle one-line-text\\\">{{ chart.legend }}</span>\\n                </div>\\n              </div>\\n\\n              <!-- Accumulator names -->\\n              <div *ngIf=\\\"accumulatorNames\\\" class=\\\"accumulators-list\\\">\\n                <table class=\\\"table table-striped table-modal\\\">\\n                  <thead>\\n                    <tr>\\n                      <th width=\\\"30\\\">Show</th>\\n                      <th>Accumulator name</th>\\n                    </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let accumulatorName of accumulatorNames\\\">\\n                      <td><input type=\\\"checkbox\\\" name=\\\"{{ accumulatorName }}\\\" value=\\\"{{ accumulatorName }}\\\" (change)=\\\"toggleAccumulatorChart( $event, accumulatorName )\\\" /></td>\\n                      <td>{{ accumulatorName }}</td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n              </div>\\n\\n              <!-- No data message -->\\n              <div *ngIf=\\\"!accumulatorNames\\\" class=\\\"response-message\\\">\\n                <p>Data is not available for this application component</p>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <!-- Thresholds & Accumulators tabs content end -->\\n      </div>\\n      <div class=\\\"modal-footer modal-footer-custom\\\"></div>\\n    </div>\\n    <!-- Modal for component inspection end -->\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/widgets/modal/component-inspection-modal.component.html\n// module id = 243\n// module chunks = 1","module.exports = \"<div class=\\\"box\\\">\\n  <div class=\\\"content-title\\\"><h3><i class=\\\"fa fa-adjust\\\"></i>Status (beta)</h3></div>\\n  <ul class=\\\"controls\\\">\\n    <li *ngFor=\\\"let component of components | componentsByCategoryFilter: categoriesService.filterString | componentsByStatusFilter: statusService.filter; let componentIndex = index;\\\" [class]=\\\"component.color | lowercase\\\"\\n        role=\\\"button\\\" data-toggle=\\\"modal\\\" [attr.data-target]=\\\"'#component-modal-' + componentIndex\\\"\\n        (click)=\\\"getComponentInspectionModalData(component.name)\\\">\\n      <a >\\n                <span class=\\\"control-tooltip form-control\\\">\\n                  <span *ngIf=\\\"component.messages.length > 0\\\" class=\\\"tooltip-top-line\\\">\\n                    <span class=\\\"status\\\"></span>\\n                    <div *ngFor=\\\"let message of component.messages\\\">\\n                      <div *ngIf=\\\"message\\\">\\n                        {{ message }}<br>\\n                      </div>\\n                    </div>\\n                  </span>\\n                  <span class=\\\"tooltip-lower-line time\\\">{{ component.ISO8601Timestamp }}</span>\\n                  <span class=\\\"arrow\\\"></span>\\n                </span>\\n                <span class=\\\"control-title\\\">\\n                  <span class=\\\"status\\\"></span>\\n                  {{ component.category }}:{{ component.name }}\\n                </span>\\n      </a>\\n    </li>\\n  </ul>\\n</div>\\n\\n<!-- Modal for component inspection -->\\n<div #componentInspectionModal *ngFor=\\\"let component of components | componentsByCategoryFilter: categoriesService.filterString | componentsByStatusFilter: statusService.filter; let componentIndex = index\\\"\\n     class=\\\"modal fade modal-stretch component-inspection\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\">\\n  <div class=\\\"modal-dialog components-inspection-modal\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header custom-modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close custom-close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\">&times;</button>\\n        <h3><span class=\\\"status {{ component.color | lowercase }}\\\"></span>{{ component.name }}</h3>\\n\\n        <!-- Thresholds, Accumulators & Connector tabs -->\\n        <ul class=\\\"nav nav-tabs tabs-pane\\\">\\n          <li *ngIf=\\\"connector?.supportsThresholds\\\">\\n            <a href=\\\"#thresholds-tab-{{ componentIndex }}\\\" data-toggle=\\\"tab\\\"  (click)=\\\"loadThresholdsData( component.name )\\\">\\n              Thresholds\\n            </a>\\n          </li>\\n          <li *ngIf=\\\"connector?.supportsAccumulators\\\">\\n            <a href=\\\"#accumulators-tab-{{ componentIndex }}\\\" data-toggle=\\\"tab\\\"  (click)=\\\"loadAccumulatorsData( component.name )\\\">\\n              Accumulators\\n            </a>\\n          </li>\\n          <li *ngIf=\\\"connector?.supportsInfo\\\">\\n            <a href=\\\"#info-tab-{{ componentIndex }}\\\" data-toggle=\\\"tab\\\" (click)=\\\"loadConnectorInformation( component.name )\\\">\\n              Connector Information\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n\\n      <!-- Thresholds & Accumulators tabs -->\\n      <div class=\\\"modal-body custom-modal-body\\\">\\n        <!-- Thresholds & Accumulators tabs content -->\\n        <div class=\\\"tab-content\\\">\\n          <!-- Thresholds tab -->\\n          <div *ngIf=\\\"connector?.supportsThresholds\\\" class=\\\"tab-pane active\\\" id=\\\"thresholds-tab-{{ componentIndex }}\\\">\\n            <div class=\\\"loading\\\" style=\\\"display: none\\\">\\n              <span class=\\\"spinner\\\"></span>\\n            </div>\\n            <div id=\\\"thresholds-view-{{ componentIndex }}\\\">\\n              <!-- Thresholds -->\\n              <div *ngIf=\\\"thresholds\\\" class=\\\"thresholds\\\">\\n                <table class=\\\"table table-striped table-modal\\\">\\n                  <thead>\\n                  <tr>\\n                    <th>Threshold name</th>\\n                    <th width=\\\"50\\\">Status</th>\\n                    <th width=\\\"90\\\">Last value</th>\\n                    <th width=\\\"200\\\">Last change timestamp</th>\\n                  </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let threshold of thresholds\\\">\\n                      <td>{{ threshold.name }}</td>\\n                      <td><div class=\\\"{{ threshold.status }} status\\\"></div></td>\\n                      <td>{{ threshold.lastValue }}</td>\\n                      <td>{{ threshold.statusChangeTimestamp }}</td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n              </div>\\n\\n              <!-- No data message -->\\n              <div *ngIf=\\\"!thresholds\\\" class=\\\"response-message\\\">\\n                <p>Data is not available for this application component</p>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <!-- Accumulator tab -->\\n          <div *ngIf=\\\"connector?.supportsAccumulators\\\" class=\\\"tab-pane\\\" id=\\\"accumulators-tab-{{ componentIndex }}\\\">\\n            <div class=\\\"loading\\\" style=\\\"display: none\\\">\\n              <span class=\\\"spinner\\\"></span>\\n            </div>\\n            <div id=\\\"accumulators-view-{{ componentIndex }}\\\">\\n              <!-- Accumulator charts -->\\n              <div *ngIf=\\\"accumulatorChartsMap[component.name]\\\" class=\\\"accumulators-charts\\\">\\n                <div *ngFor=\\\"let chart of accumulatorChartsMap[component.name]\\\" class=\\\"chart-item chart-item-modal\\\">\\n                  <div class=\\\"chart-box-name\\\">{{ chart.name }}</div>\\n                  <div id=\\\"{{ chart.divId }}\\\" class=\\\"chart-box\\\" #chart_box style=\\\"width: 800px; height: 300px;\\\"></div>\\n                  <span class=\\\"footitle one-line-text\\\">{{ chart.legend }}</span>\\n                </div>\\n              </div>\\n\\n              <!-- Accumulator names -->\\n              <div *ngIf=\\\"accumulatorNames\\\" class=\\\"accumulators-list\\\">\\n                <table class=\\\"table table-striped table-modal\\\">\\n                  <thead>\\n                    <tr>\\n                      <th width=\\\"30\\\">Show</th>\\n                      <th>Accumulator name</th>\\n                    </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let accumulatorName of accumulatorNames\\\">\\n                      <td><input type=\\\"checkbox\\\" name=\\\"{{ accumulatorName }}\\\" value=\\\"{{ accumulatorName }}\\\" (change)=\\\"toggleAccumulatorChart( $event, component.name, accumulatorName )\\\" /></td>\\n                      <td>{{ accumulatorName }}</td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n              </div>\\n\\n              <!-- No data message -->\\n              <div *ngIf=\\\"!accumulatorNames\\\" class=\\\"response-message\\\">\\n                <p>Data is not available for this application component</p>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <!-- Info tab -->\\n          <div *ngIf=\\\"connector?.supportsInfo\\\" class=\\\"tab-pane\\\" id=\\\"info-tab-{{ componentIndex }}\\\">\\n            <div id=\\\"info-view-{{ componentIndex }}\\\">\\n              <!-- Connector general information -->\\n              <div *ngIf=\\\"connector.info\\\" class=\\\"connector-info\\\">\\n                <table class=\\\"table table-striped table-modal\\\">\\n                  <thead>\\n                    <tr>\\n                      <th>Property</th>\\n                      <th>Value</th>\\n                    </tr>\\n                  </thead>\\n                  <tbody>\\n                    <tr *ngFor=\\\"let property of connector.info | keys\\\">\\n                      <td>{{ property.key }}</td>\\n                      <td>{{ property.value }}</td>\\n                    </tr>\\n                  </tbody>\\n                </table>\\n              </div>\\n\\n              <!-- No data message -->\\n              <div *ngIf=\\\"!connector.info\\\" class=\\\"response-message\\\">\\n                <p>Data is not available for this application component</p>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <!-- Thresholds & Accumulators tabs content end -->\\n      </div>\\n      <div class=\\\"modal-footer modal-footer-custom\\\"></div>\\n    </div>\\n    <!-- Modal for component inspection end -->\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/widgets/moskito-beta-components-widget.component.html\n// module id = 244\n// module chunks = 1","module.exports = \"\\n\\n<div *ngFor=\\\"let category of categories | keys; let categoryIndex = index;\\\">\\n  <div class=\\\"box {{ componentUtils.getWorthComponentStatus( category.value ) | lowercase }}\\\">\\n    <div class=\\\"content-title\\\"><h3><span class=\\\"status\\\"></span>{{ category.key }}</h3></div>\\n    <ul class=\\\"controls\\\">\\n      <li *ngFor=\\\"let component of category.value | componentsByCategoryFilter: categoriesService.filterString | componentsByStatusFilter: statusService.filter; let componentIndex = index;\\\" [class]=\\\"component.color | lowercase\\\" role=\\\"button\\\" data-toggle=\\\"modal\\\" [attr.data-target]=\\\"'#component-modal-' + categoryIndex + '' + componentIndex\\\" (click)=\\\"getComponentInspectionModalData(component.name)\\\">\\n        <a >\\n                <span class=\\\"control-tooltip form-control\\\">\\n                  <span *ngIf=\\\"component.messages.length > 0\\\" class=\\\"tooltip-top-line\\\">\\n                    <span class=\\\"status\\\"></span>\\n                    <div *ngFor=\\\"let message of component.messages\\\">\\n                      <div *ngIf=\\\"message\\\">\\n                        {{ message }}<br>\\n                      </div>\\n                    </div>\\n                  </span>\\n                  <span class=\\\"tooltip-lower-line time\\\">{{ component.ISO8601Timestamp }}</span>\\n                  <span class=\\\"arrow\\\"></span>\\n                </span>\\n                <span class=\\\"control-title\\\">\\n                  <span class=\\\"status\\\"></span>\\n                  {{ component.name }}\\n                </span>\\n        </a>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <!-- Modal for component inspection -->\\n  <div #componentInspectionModal *ngFor=\\\"let component of category.value | componentsByCategoryFilter: categoriesService.filterString | componentsByStatusFilter: statusService.filter; let componentIndex = index\\\" id=\\\"component-modal-{{ categoryIndex }}{{ componentIndex }}\\\"\\n       class=\\\"modal fade modal-stretch component-inspection\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\">\\n    <div class=\\\"modal-dialog components-inspection-modal\\\">\\n      <div class=\\\"modal-content\\\">\\n        <div class=\\\"modal-header custom-modal-header\\\">\\n          <button type=\\\"button\\\" class=\\\"close custom-close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\">&times;</button>\\n          <h3><span class=\\\"status {{ component.color | lowercase }}\\\"></span>{{ component.name }}</h3>\\n\\n          <!-- Thresholds, Accumulators & Connector tabs -->\\n          <ul class=\\\"nav nav-tabs tabs-pane\\\">\\n            <li *ngIf=\\\"connector?.supportsThresholds\\\">\\n              <a href=\\\"#thresholds-tab-{{ categoryIndex }}{{ componentIndex }}\\\" data-toggle=\\\"tab\\\" (click)=\\\"loadThresholdsData( component.name )\\\">\\n                Thresholds\\n              </a>\\n            </li>\\n            <li *ngIf=\\\"connector?.supportsAccumulators\\\">\\n              <a href=\\\"#accumulators-tab-{{ categoryIndex }}{{ componentIndex }}\\\" data-toggle=\\\"tab\\\" (click)=\\\"loadAccumulatorsData( component.name )\\\">\\n                Accumulators\\n              </a>\\n            </li>\\n            <li *ngIf=\\\"connector?.supportsInfo\\\">\\n              <a href=\\\"#info-tab-{{ componentIndex }}\\\" data-toggle=\\\"tab\\\" (click)=\\\"loadConnectorInformation( component.name )\\\">\\n                Connector Information\\n              </a>\\n            </li>\\n            <li>\\n              <a href=\\\"#history-tab-{{ componentIndex }}\\\" data-toggle=\\\"tab\\\" (click)=\\\"loadComponentHistory( component.name )\\\">\\n                History\\n              </a>\\n            </li>\\n          </ul>\\n        </div>\\n\\n        <!-- Thresholds & Accumulators tabs -->\\n        <div class=\\\"modal-body custom-modal-body\\\">\\n          <!-- Thresholds & Accumulators tabs content -->\\n          <div class=\\\"tab-content\\\">\\n            <div *ngIf=\\\"connector?.supportsThresholds\\\" class=\\\"tab-pane active\\\" id=\\\"thresholds-tab-{{ categoryIndex }}{{ componentIndex }}\\\">\\n              <div class=\\\"loading\\\" style=\\\"display: none\\\">\\n                <span class=\\\"spinner\\\"></span>\\n              </div>\\n              <div id=\\\"thresholds-view-{{ categoryIndex }}{{ componentIndex }}\\\">\\n                <!-- Thresholds -->\\n                <div *ngIf=\\\"thresholds\\\" class=\\\"thresholds\\\">\\n                  <table class=\\\"table table-striped table-modal\\\">\\n                    <thead>\\n                    <tr>\\n                      <th>Threshold name</th>\\n                      <th width=\\\"50\\\">Status</th>\\n                      <th width=\\\"90\\\">Last value</th>\\n                      <th width=\\\"200\\\">Last change timestamp</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                    <tr *ngFor=\\\"let threshold of thresholds\\\">\\n                      <td>{{ threshold.name }}</td>\\n                      <td><div class=\\\"{{ threshold.status }} status\\\"></div></td>\\n                      <td>{{ threshold.lastValue }}</td>\\n                      <td>{{ threshold.statusChangeTimestamp }}</td>\\n                    </tr>\\n                    </tbody>\\n                  </table>\\n                </div>\\n\\n                <!-- No data message -->\\n                <div *ngIf=\\\"!thresholds\\\" class=\\\"response-message\\\">\\n                  <p>Data is not available for this application component</p>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <div *ngIf=\\\"connector?.supportsAccumulators\\\" class=\\\"tab-pane\\\" id=\\\"accumulators-tab-{{ categoryIndex }}{{ componentIndex }}\\\">\\n              <div class=\\\"loading\\\" style=\\\"display: none\\\">\\n                <span class=\\\"spinner\\\"></span>\\n              </div>\\n              <div id=\\\"accumulators-view-{{ categoryIndex }}{{ componentIndex }}\\\">\\n                <!-- Accumulator charts -->\\n                <div *ngIf=\\\"accumulatorChartsMap[component.name]\\\" class=\\\"accumulators-charts\\\">\\n                  <div *ngFor=\\\"let chart of accumulatorChartsMap[component.name]\\\" class=\\\"chart-item chart-item-modal\\\">\\n                    <div class=\\\"chart-box-name\\\">{{ chart.name }}</div>\\n                    <div id=\\\"{{ chart.divId }}\\\" class=\\\"chart-box\\\" #chart_box style=\\\"width: 800px; height: 300px;\\\"></div>\\n                    <span class=\\\"footitle one-line-text\\\">{{ chart.legend }}</span>\\n                  </div>\\n                </div>\\n\\n                <!-- Accumulator names -->\\n                <div *ngIf=\\\"accumulatorNames\\\" class=\\\"accumulators-list\\\">\\n                  <table class=\\\"table table-striped table-modal\\\">\\n                    <thead>\\n                    <tr>\\n                      <th width=\\\"30\\\">Show</th>\\n                      <th>Accumulator name</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                    <tr *ngFor=\\\"let accumulatorName of accumulatorNames\\\">\\n                      <td><input type=\\\"checkbox\\\" name=\\\"{{ accumulatorName }}\\\" value=\\\"{{ accumulatorName }}\\\" (change)=\\\"toggleAccumulatorChart( $event, component.name, accumulatorName )\\\" /></td>\\n                      <td>{{ accumulatorName }}</td>\\n                    </tr>\\n                    </tbody>\\n                  </table>\\n                </div>\\n\\n                <!-- No data message -->\\n                <div *ngIf=\\\"!accumulatorNames\\\" class=\\\"response-message\\\">\\n                  <p>Data is not available for this application component</p>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <!-- Info tab -->\\n            <div *ngIf=\\\"connector?.supportsInfo\\\" class=\\\"tab-pane\\\" id=\\\"info-tab-{{ componentIndex }}\\\">\\n              <div id=\\\"info-view-{{ componentIndex }}\\\">\\n                <!-- Connector general information -->\\n                <div *ngIf=\\\"connector.info\\\" class=\\\"connector-info\\\">\\n                  <table class=\\\"table table-striped table-modal\\\">\\n                    <thead>\\n                    <tr>\\n                      <th>Property</th>\\n                      <th>Value</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                    <tr *ngFor=\\\"let property of connector.info | keys\\\">\\n                      <td>{{ property.key }}</td>\\n                      <td>{{ property.value }}</td>\\n                    </tr>\\n                    </tbody>\\n                  </table>\\n                </div>\\n\\n                <!-- No data message -->\\n                <div *ngIf=\\\"!connector.info\\\" class=\\\"response-message\\\">\\n                  <p>Data is not available for this application component</p>\\n                </div>\\n              </div>\\n            </div>\\n\\n            <!-- Component history tab -->\\n            <div class=\\\"tab-pane\\\" id=\\\"history-tab-{{ componentIndex }}\\\">\\n              <div *ngIf=\\\"isLoading\\\" class=\\\"loading\\\">\\n                <span class=\\\"spinner\\\"></span>\\n              </div>\\n              <div *ngIf=\\\"!isLoading\\\" id=\\\"history-view-{{ componentIndex }}\\\">\\n                <!-- Connector general information -->\\n                <div *ngIf=\\\"history?.length > 0\\\" class=\\\"component-history\\\">\\n                  <table class=\\\"table table-striped\\\">\\n                    <thead>\\n                    <tr>\\n                      <th width=\\\"250\\\">Timestamp</th>\\n                      <th>Name</th>\\n                      <th width=\\\"200\\\">Status change</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                    <tr *ngFor=\\\"let item of history\\\">\\n                      <td>{{ item.isoTimestamp }}</td>\\n                      <td>{{ item.component?.name }}</td>\\n                      <td>\\n                        <span class=\\\"status {{ item.oldStatus | lowercase }}\\\"></span>\\n                        <span class=\\\"arrow-right\\\"></span>\\n                        <span class=\\\"status {{ item.newStatus | lowercase }}\\\"></span>\\n                      </td>\\n                    </tr>\\n                    </tbody>\\n                  </table>\\n                </div>\\n\\n                <!-- No data message -->\\n                <div *ngIf=\\\"!history || history.length === 0\\\" class=\\\"response-message\\\">\\n                  <p>Data is not available for this application component</p>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <!-- Thresholds & Accumulators tabs content end -->\\n        </div>\\n        <div class=\\\"modal-footer modal-footer-custom\\\"></div>\\n      </div>\\n      <!-- Modal for component inspection end -->\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/widgets/moskito-components-widget.component.html\n// module id = 245\n// module chunks = 1","module.exports = \"\\n<div class=\\\"box tv\\\">\\n  <div class=\\\"content-title\\\"><h3><i class=\\\"fa fa-smile-o\\\"></i>TV</h3></div>\\n  <div class=\\\"smiley\\\">\\n    <img src=\\\"./assets/img/smiley_{{ status | lowercase }}.png\\\" alt=\\\"status: {{ status | lowercase }}\\\"/>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/widgets/tv-widget.component.html\n// module id = 246\n// module chunks = 1"],"sourceRoot":""}